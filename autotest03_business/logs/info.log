2021-06-22 14:32:21,448 - [test_Login01.py -->line:40] - INFO:测试编号:1,测试用例标题:登录成功,执行成功！
2021-06-22 14:39:05,240 - [test_Login02.py -->line:51] - INFO:测试编号:1,测试用例标题:登录成功,执行成功！
2021-06-22 14:39:19,922 - [test_Login02.py -->line:51] - INFO:测试编号:1,测试用例标题:登录成功,执行成功！
2021-06-22 14:44:10,109 - [test_Login03.py -->line:60] - INFO:测试编号:1,测试用例标题:登录成功,执行成功！
2021-06-22 14:44:10,145 - [test_Login03.py -->line:60] - INFO:测试编号:2,测试用例标题:用户名为空,执行成功！
2021-06-22 14:44:10,180 - [test_Login03.py -->line:60] - INFO:测试编号:3,测试用例标题:错误的用户名,执行成功！
2021-06-22 14:44:49,572 - [test_Login03.py -->line:60] - INFO:测试编号:1,测试用例标题:登录成功,执行成功！
2021-06-22 14:44:49,600 - [test_Login03.py -->line:60] - INFO:测试编号:2,测试用例标题:用户名为空,执行成功！
2021-06-22 14:44:49,629 - [test_Login03.py -->line:60] - INFO:测试编号:3,测试用例标题:错误的用户名,执行成功！
2021-06-22 14:44:49,658 - [test_Login03.py -->line:55] - ERROR:测试编号:4,测试用例标题:大小写区分,执行失败,实际结果为:{'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDM3NDI4OS42MzMxODY4OjBjZTg0ZmU5Nzk1YzBlZGE1Y2Q3NTIwMjZjMDM5NzFkNGNlNzgyN2U='}
2021-06-22 14:44:49,658 - [test_Login03.py -->line:56] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYyNDM3NDI4OS42MzMxODY4OjBjZTg0ZmU5Nzk1YzBlZGE1Y2Q3NTIwMjZjMDM5NzFkNGNlNzgyN2U='}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDM3NDI4O[64 chars]2U='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYyNDM3NDI4OS42MzMxODY4OjBjZTg0ZmU5Nzk1YzBlZGE1Y2Q3NTIwMjZjMDM5NzFkNGNlNzgyN2U='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_login02\test_Login03.py", line 52, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYyNDM3NDI4OS42MzMxODY4OjBjZTg0ZmU5Nzk1YzBlZGE1Y2Q3NTIwMjZjMDM5NzFkNGNlNzgyN2U='}
2021-06-22 14:44:49,689 - [test_Login03.py -->line:60] - INFO:测试编号:5,测试用例标题:密码为空,执行成功！
2021-06-22 14:44:49,717 - [test_Login03.py -->line:60] - INFO:测试编号:6,测试用例标题:密码错误,执行成功！
2021-06-22 14:44:49,748 - [test_Login03.py -->line:55] - ERROR:测试编号:7,测试用例标题:大小写区分,执行失败,实际结果为:{'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDM3NDI4OS43MjQ5NDEzOmY4ZjI2MWEyODIxYTA3YTBjNGM5ZmViYjVmY2I3ZGI2MjE5YzkzYzM='}
2021-06-22 14:44:49,748 - [test_Login03.py -->line:56] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYyNDM3NDI4OS43MjQ5NDEzOmY4ZjI2MWEyODIxYTA3YTBjNGM5ZmViYjVmY2I3ZGI2MjE5YzkzYzM='}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDM3NDI4O[64 chars]zM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYyNDM3NDI4OS43MjQ5NDEzOmY4ZjI2MWEyODIxYTA3YTBjNGM5ZmViYjVmY2I3ZGI2MjE5YzkzYzM='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_login02\test_Login03.py", line 52, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYyNDM3NDI4OS43MjQ5NDEzOmY4ZjI2MWEyODIxYTA3YTBjNGM5ZmViYjVmY2I3ZGI2MjE5YzkzYzM='}
2021-06-22 14:44:49,779 - [test_Login03.py -->line:60] - INFO:测试编号:8,测试用例标题:用户类型为空,执行成功！
2021-06-22 14:44:49,808 - [test_Login03.py -->line:60] - INFO:测试编号:9,测试用例标题:用户类型非枚举,执行成功！
2021-06-22 14:44:49,838 - [test_Login03.py -->line:60] - INFO:测试编号:10,测试用例标题:非普通用户,执行成功！
2021-06-22 14:44:49,868 - [test_Login03.py -->line:60] - INFO:测试编号:11,测试用例标题:格式错误,执行成功！
2021-06-22 14:47:37,484 - [test_Login03.py -->line:60] - INFO:测试编号:1,测试用例标题:登录成功,执行成功！
2021-06-22 14:47:37,511 - [test_Login03.py -->line:60] - INFO:测试编号:2,测试用例标题:用户名为空,执行成功！
2021-06-22 14:47:37,544 - [test_Login03.py -->line:60] - INFO:测试编号:3,测试用例标题:错误的用户名,执行成功！
2021-06-22 14:47:37,571 - [test_Login03.py -->line:55] - ERROR:测试编号:4,测试用例标题:大小写区分,执行失败,实际结果为:{'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDM3NDQ1Ny41NDczMjQ0OjI3ZDI4MmQxOWRhYmI5OTNmNTM1MmViYzY4MmU5ZWVmNzZlNmMzM2M='}
2021-06-22 14:47:37,571 - [test_Login03.py -->line:56] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDM3NDQ1N[64 chars]2M='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYyNDM3NDQ1Ny41NDczMjQ0OjI3ZDI4MmQxOWRhYmI5OTNmNTM1MmViYzY4MmU5ZWVmNzZlNmMzM2M='}
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_login02\test_Login03.py", line 52, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDM3NDQ1N[64 chars]2M='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYyNDM3NDQ1Ny41NDczMjQ0OjI3ZDI4MmQxOWRhYmI5OTNmNTM1MmViYzY4MmU5ZWVmNzZlNmMzM2M='}
2021-06-22 14:47:37,599 - [test_Login03.py -->line:60] - INFO:测试编号:5,测试用例标题:密码为空,执行成功！
2021-06-22 14:47:37,628 - [test_Login03.py -->line:60] - INFO:测试编号:6,测试用例标题:密码错误,执行成功！
2021-06-22 14:47:37,655 - [test_Login03.py -->line:55] - ERROR:测试编号:7,测试用例标题:大小写区分,执行失败,实际结果为:{'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDM3NDQ1Ny42MzIwOTcyOjFkZGE1Mjc3M2JjZjExMDBmY2NhYTJkMWFmNjA1MWUyODEzMGU5ZDk='}
2021-06-22 14:47:37,656 - [test_Login03.py -->line:56] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDM3NDQ1N[64 chars]Dk='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYyNDM3NDQ1Ny42MzIwOTcyOjFkZGE1Mjc3M2JjZjExMDBmY2NhYTJkMWFmNjA1MWUyODEzMGU5ZDk='}
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_login02\test_Login03.py", line 52, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDM3NDQ1N[64 chars]Dk='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYyNDM3NDQ1Ny42MzIwOTcyOjFkZGE1Mjc3M2JjZjExMDBmY2NhYTJkMWFmNjA1MWUyODEzMGU5ZDk='}
2021-06-22 14:47:37,684 - [test_Login03.py -->line:60] - INFO:测试编号:8,测试用例标题:用户类型为空,执行成功！
2021-06-22 14:47:37,716 - [test_Login03.py -->line:60] - INFO:测试编号:9,测试用例标题:用户类型非枚举,执行成功！
2021-06-22 14:47:37,746 - [test_Login03.py -->line:60] - INFO:测试编号:10,测试用例标题:非普通用户,执行成功！
2021-06-22 14:47:37,777 - [test_Login03.py -->line:60] - INFO:测试编号:11,测试用例标题:格式错误,执行成功！
2021-06-22 15:08:38,803 - [test_Login04.py -->line:66] - INFO:测试编号:1,测试用例标题:登录成功,执行成功！
2021-06-22 15:12:08,672 - [test_Login04.py -->line:66] - INFO:测试编号:1,测试用例标题:登录成功,执行成功！
2021-06-22 15:13:31,754 - [test_Login04.py -->line:70] - INFO:测试编号:1,测试用例标题:登录成功,执行成功！
2021-06-22 15:15:46,213 - [test_Login04.py -->line:70] - INFO:测试编号:1,测试用例标题:登录成功,执行成功！
2021-06-22 15:15:46,248 - [test_Login04.py -->line:70] - INFO:测试编号:2,测试用例标题:用户名为空,执行成功！
2021-06-22 15:15:46,282 - [test_Login04.py -->line:70] - INFO:测试编号:3,测试用例标题:错误的用户名,执行成功！
2021-06-22 15:15:46,319 - [test_Login04.py -->line:65] - ERROR:测试编号:4,测试用例标题:大小写区分,执行失败,实际结果为:{'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDM3NjE0Ni4yODkxODc3OmYyZDkyM2VlNzMzNTdlMGQzMDhkOThjZTZkMWMxNjYyZWQ3N2QzNWM='}
2021-06-22 15:15:46,319 - [test_Login04.py -->line:66] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYyNDM3NjE0Ni4yODkxODc3OmYyZDkyM2VlNzMzNTdlMGQzMDhkOThjZTZkMWMxNjYyZWQ3N2QzNWM='}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDM3NjE0N[64 chars]WM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYyNDM3NjE0Ni4yODkxODc3OmYyZDkyM2VlNzMzNTdlMGQzMDhkOThjZTZkMWMxNjYyZWQ3N2QzNWM='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_login02\test_Login04.py", line 62, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYyNDM3NjE0Ni4yODkxODc3OmYyZDkyM2VlNzMzNTdlMGQzMDhkOThjZTZkMWMxNjYyZWQ3N2QzNWM='}
2021-06-22 15:15:46,357 - [test_Login04.py -->line:70] - INFO:测试编号:5,测试用例标题:密码为空,执行成功！
2021-06-22 15:15:46,390 - [test_Login04.py -->line:70] - INFO:测试编号:6,测试用例标题:密码错误,执行成功！
2021-06-22 15:15:46,425 - [test_Login04.py -->line:65] - ERROR:测试编号:7,测试用例标题:大小写区分,执行失败,实际结果为:{'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDM3NjE0Ni4zOTU5MDI2OmYxZmFmMjQ2NTg4OWJlZjE2YmMxNDE1NWJkMjEwMmNiNmU3M2UyY2Q='}
2021-06-22 15:15:46,425 - [test_Login04.py -->line:66] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYyNDM3NjE0Ni4zOTU5MDI2OmYxZmFmMjQ2NTg4OWJlZjE2YmMxNDE1NWJkMjEwMmNiNmU3M2UyY2Q='}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDM3NjE0N[64 chars]2Q='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYyNDM3NjE0Ni4zOTU5MDI2OmYxZmFmMjQ2NTg4OWJlZjE2YmMxNDE1NWJkMjEwMmNiNmU3M2UyY2Q='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_login02\test_Login04.py", line 62, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYyNDM3NjE0Ni4zOTU5MDI2OmYxZmFmMjQ2NTg4OWJlZjE2YmMxNDE1NWJkMjEwMmNiNmU3M2UyY2Q='}
2021-06-22 15:15:46,462 - [test_Login04.py -->line:70] - INFO:测试编号:8,测试用例标题:用户类型为空,执行成功！
2021-06-22 15:15:46,497 - [test_Login04.py -->line:70] - INFO:测试编号:9,测试用例标题:用户类型非枚举,执行成功！
2021-06-22 15:15:46,533 - [test_Login04.py -->line:70] - INFO:测试编号:10,测试用例标题:非普通用户,执行成功！
2021-06-22 15:15:46,567 - [test_Login04.py -->line:70] - INFO:测试编号:11,测试用例标题:格式错误,执行成功！
2021-06-23 10:33:23,110 - [test_Login04.py -->line:68] - INFO:测试编号:1,测试用例标题:登录成功,执行成功！
2021-06-23 10:33:23,188 - [test_Login04.py -->line:68] - INFO:测试编号:2,测试用例标题:用户名为空,执行成功！
2021-06-23 10:33:23,298 - [test_Login04.py -->line:68] - INFO:测试编号:3,测试用例标题:错误的用户名,执行成功！
2021-06-23 10:33:23,376 - [test_Login04.py -->line:63] - ERROR:测试编号:4,测试用例标题:大小写区分,执行失败,实际结果为:{'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0NTYwMy4yOTgxMjg0OmYyNWE2NWRmYzVhNDE2MmM5MDQ5MjczYzEzMjhiOWQyYjE4NTAxYzY='}
2021-06-23 10:33:23,391 - [test_Login04.py -->line:64] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0NTYwM[64 chars]zY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYyNDQ0NTYwMy4yOTgxMjg0OmYyNWE2NWRmYzVhNDE2MmM5MDQ5MjczYzEzMjhiOWQyYjE4NTAxYzY='}
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_login02\test_Login04.py", line 60, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0NTYwM[64 chars]zY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYyNDQ0NTYwMy4yOTgxMjg0OmYyNWE2NWRmYzVhNDE2MmM5MDQ5MjczYzEzMjhiOWQyYjE4NTAxYzY='}
2021-06-23 10:33:23,501 - [test_Login04.py -->line:68] - INFO:测试编号:5,测试用例标题:密码为空,执行成功！
2021-06-23 10:33:23,579 - [test_Login04.py -->line:68] - INFO:测试编号:6,测试用例标题:密码错误,执行成功！
2021-06-23 10:33:23,654 - [test_Login04.py -->line:63] - ERROR:测试编号:7,测试用例标题:大小写区分,执行失败,实际结果为:{'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0NTYwMy41NzkzMDg6MWM5NzFhZTNjZTRjNTJhYmEwMTQ4MzU3ZDc3NjA0MTcxYjI2MTY3OQ=='}
2021-06-23 10:33:23,654 - [test_Login04.py -->line:64] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0NTYwM[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYyNDQ0NTYwMy41NzkzMDg6MWM5NzFhZTNjZTRjNTJhYmEwMTQ4MzU3ZDc3NjA0MTcxYjI2MTY3OQ=='}
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_login02\test_Login04.py", line 60, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0NTYwM[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYyNDQ0NTYwMy41NzkzMDg6MWM5NzFhZTNjZTRjNTJhYmEwMTQ4MzU3ZDc3NjA0MTcxYjI2MTY3OQ=='}
2021-06-23 10:33:23,701 - [test_Login04.py -->line:68] - INFO:测试编号:8,测试用例标题:用户类型为空,执行成功！
2021-06-23 10:33:23,763 - [test_Login04.py -->line:68] - INFO:测试编号:9,测试用例标题:用户类型非枚举,执行成功！
2021-06-23 10:33:23,810 - [test_Login04.py -->line:68] - INFO:测试编号:10,测试用例标题:非普通用户,执行成功！
2021-06-23 10:33:23,877 - [test_Login04.py -->line:68] - INFO:测试编号:11,测试用例标题:格式错误,执行成功！
2021-06-23 10:49:31,120 - [test_Login04.py -->line:68] - INFO:测试编号:1,测试用例标题:登录成功,执行成功！
2021-06-23 10:49:31,215 - [test_Login04.py -->line:68] - INFO:测试编号:2,测试用例标题:用户名为空,执行成功！
2021-06-23 10:49:31,309 - [test_Login04.py -->line:68] - INFO:测试编号:3,测试用例标题:错误的用户名,执行成功！
2021-06-23 10:49:31,402 - [test_Login04.py -->line:63] - ERROR:测试编号:4,测试用例标题:大小写区分,执行失败,实际结果为:{'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0NjU3MS4zMDkwOTc1OjI1ZDQwNDZlMzY4MTFjMTMwNmQyYTA2YmE4ZDJiMjQ4MDZjZTZmNjI='}
2021-06-23 10:49:31,402 - [test_Login04.py -->line:64] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0NjU3M[64 chars]jI='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYyNDQ0NjU3MS4zMDkwOTc1OjI1ZDQwNDZlMzY4MTFjMTMwNmQyYTA2YmE4ZDJiMjQ4MDZjZTZmNjI='}
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_login02\test_Login04.py", line 60, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0NjU3M[64 chars]jI='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYyNDQ0NjU3MS4zMDkwOTc1OjI1ZDQwNDZlMzY4MTFjMTMwNmQyYTA2YmE4ZDJiMjQ4MDZjZTZmNjI='}
2021-06-23 10:49:31,480 - [test_Login04.py -->line:68] - INFO:测试编号:5,测试用例标题:密码为空,执行成功！
2021-06-23 10:49:31,574 - [test_Login04.py -->line:68] - INFO:测试编号:6,测试用例标题:密码错误,执行成功！
2021-06-23 10:49:31,637 - [test_Login04.py -->line:63] - ERROR:测试编号:7,测试用例标题:大小写区分,执行失败,实际结果为:{'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0NjU3MS41NzQ2NTY6YTk5ZmJmZjQzMWYxMWYzOTNiNjBhOGE3MDY1ODdiY2I3NGMzYTI2YQ=='}
2021-06-23 10:49:31,637 - [test_Login04.py -->line:64] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0NjU3M[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYyNDQ0NjU3MS41NzQ2NTY6YTk5ZmJmZjQzMWYxMWYzOTNiNjBhOGE3MDY1ODdiY2I3NGMzYTI2YQ=='}
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_login02\test_Login04.py", line 60, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0NjU3M[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYyNDQ0NjU3MS41NzQ2NTY6YTk5ZmJmZjQzMWYxMWYzOTNiNjBhOGE3MDY1ODdiY2I3NGMzYTI2YQ=='}
2021-06-23 10:49:31,699 - [test_Login04.py -->line:68] - INFO:测试编号:8,测试用例标题:用户类型为空,执行成功！
2021-06-23 10:49:31,748 - [test_Login04.py -->line:68] - INFO:测试编号:9,测试用例标题:用户类型非枚举,执行成功！
2021-06-23 10:49:31,810 - [test_Login04.py -->line:68] - INFO:测试编号:10,测试用例标题:非普通用户,执行成功！
2021-06-23 10:49:31,857 - [test_Login04.py -->line:68] - INFO:测试编号:11,测试用例标题:格式错误,执行成功！
2021-06-23 10:56:22,915 - [test_Login04.py -->line:68] - INFO:测试编号:1,测试用例标题:登录成功,执行成功！
2021-06-23 10:56:23,009 - [test_Login04.py -->line:68] - INFO:测试编号:2,测试用例标题:用户名为空,执行成功！
2021-06-23 10:56:23,119 - [test_Login04.py -->line:68] - INFO:测试编号:3,测试用例标题:错误的用户名,执行成功！
2021-06-23 10:56:23,213 - [test_Login04.py -->line:63] - ERROR:测试编号:4,测试用例标题:大小写区分,执行失败,实际结果为:{'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0Njk4My4xMTk2OTM6MTA5N2Q1NzhhMDg5OGRjMDNiOGVkN2I5NjM4NWEyZjBjMTM0Zjk2NQ=='}
2021-06-23 10:56:23,213 - [test_Login04.py -->line:64] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0Njk4M[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYyNDQ0Njk4My4xMTk2OTM6MTA5N2Q1NzhhMDg5OGRjMDNiOGVkN2I5NjM4NWEyZjBjMTM0Zjk2NQ=='}
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_login02\test_Login04.py", line 60, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0Njk4M[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYyNDQ0Njk4My4xMTk2OTM6MTA5N2Q1NzhhMDg5OGRjMDNiOGVkN2I5NjM4NWEyZjBjMTM0Zjk2NQ=='}
2021-06-23 10:56:23,307 - [test_Login04.py -->line:68] - INFO:测试编号:5,测试用例标题:密码为空,执行成功！
2021-06-23 10:56:23,402 - [test_Login04.py -->line:68] - INFO:测试编号:6,测试用例标题:密码错误,执行成功！
2021-06-23 10:56:23,480 - [test_Login04.py -->line:63] - ERROR:测试编号:7,测试用例标题:大小写区分,执行失败,实际结果为:{'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0Njk4My40MDIxNjAyOjU0YzdkODVlZGZmMzA2MDA3Yjg2ZGUxYzEyZGY2MjJiNWYwNDE1NWY='}
2021-06-23 10:56:23,480 - [test_Login04.py -->line:64] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0Njk4M[64 chars]WY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYyNDQ0Njk4My40MDIxNjAyOjU0YzdkODVlZGZmMzA2MDA3Yjg2ZGUxYzEyZGY2MjJiNWYwNDE1NWY='}
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_login02\test_Login04.py", line 60, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0Njk4M[64 chars]WY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYyNDQ0Njk4My40MDIxNjAyOjU0YzdkODVlZGZmMzA2MDA3Yjg2ZGUxYzEyZGY2MjJiNWYwNDE1NWY='}
2021-06-23 10:56:23,542 - [test_Login04.py -->line:68] - INFO:测试编号:8,测试用例标题:用户类型为空,执行成功！
2021-06-23 10:56:23,590 - [test_Login04.py -->line:68] - INFO:测试编号:9,测试用例标题:用户类型非枚举,执行成功！
2021-06-23 10:56:23,637 - [test_Login04.py -->line:68] - INFO:测试编号:10,测试用例标题:非普通用户,执行成功！
2021-06-23 10:56:23,684 - [test_Login04.py -->line:68] - INFO:测试编号:11,测试用例标题:格式错误,执行成功！
2021-06-23 10:58:16,416 - [test_Login04.py -->line:68] - INFO:测试编号:1,测试用例标题:登录成功,执行成功！
2021-06-23 10:58:16,510 - [test_Login04.py -->line:68] - INFO:测试编号:2,测试用例标题:用户名为空,执行成功！
2021-06-23 10:58:16,604 - [test_Login04.py -->line:68] - INFO:测试编号:3,测试用例标题:错误的用户名,执行成功！
2021-06-23 10:58:16,698 - [test_Login04.py -->line:63] - ERROR:测试编号:4,测试用例标题:大小写区分,执行失败,实际结果为:{'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0NzA5Ni42MDQ1NjE2OjFhNDZhY2RhZmVmY2JkYTNmNzYzNmFiYWMzOWZiNzdhNzcyYzRhMWU='}
2021-06-23 10:58:16,698 - [test_Login04.py -->line:64] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0NzA5N[64 chars]WU='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYyNDQ0NzA5Ni42MDQ1NjE2OjFhNDZhY2RhZmVmY2JkYTNmNzYzNmFiYWMzOWZiNzdhNzcyYzRhMWU='}
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_login02\test_Login04.py", line 60, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0NzA5N[64 chars]WU='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYyNDQ0NzA5Ni42MDQ1NjE2OjFhNDZhY2RhZmVmY2JkYTNmNzYzNmFiYWMzOWZiNzdhNzcyYzRhMWU='}
2021-06-23 10:58:16,813 - [test_Login04.py -->line:68] - INFO:测试编号:5,测试用例标题:密码为空,执行成功！
2021-06-23 10:58:16,907 - [test_Login04.py -->line:68] - INFO:测试编号:6,测试用例标题:密码错误,执行成功！
2021-06-23 10:58:16,970 - [test_Login04.py -->line:63] - ERROR:测试编号:7,测试用例标题:大小写区分,执行失败,实际结果为:{'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0NzA5Ni45MDc0MTM1OjRiZDRjODA1N2YwMDNmZTU2OWM5NWI1MmRkNGZjYTAxMWQzY2Y2OTY='}
2021-06-23 10:58:16,970 - [test_Login04.py -->line:64] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0NzA5N[64 chars]TY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYyNDQ0NzA5Ni45MDc0MTM1OjRiZDRjODA1N2YwMDNmZTU2OWM5NWI1MmRkNGZjYTAxMWQzY2Y2OTY='}
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_login02\test_Login04.py", line 60, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0NzA5N[64 chars]TY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYyNDQ0NzA5Ni45MDc0MTM1OjRiZDRjODA1N2YwMDNmZTU2OWM5NWI1MmRkNGZjYTAxMWQzY2Y2OTY='}
2021-06-23 10:58:17,033 - [test_Login04.py -->line:68] - INFO:测试编号:8,测试用例标题:用户类型为空,执行成功！
2021-06-23 10:58:17,080 - [test_Login04.py -->line:68] - INFO:测试编号:9,测试用例标题:用户类型非枚举,执行成功！
2021-06-23 10:58:17,127 - [test_Login04.py -->line:68] - INFO:测试编号:10,测试用例标题:非普通用户,执行成功！
2021-06-23 10:58:17,175 - [test_Login04.py -->line:68] - INFO:测试编号:11,测试用例标题:格式错误,执行成功！
2021-06-23 10:59:43,775 - [test_Login04.py -->line:68] - INFO:测试编号:1,测试用例标题:登录成功,执行成功！
2021-06-23 10:59:43,870 - [test_Login04.py -->line:68] - INFO:测试编号:2,测试用例标题:用户名为空,执行成功！
2021-06-23 10:59:43,963 - [test_Login04.py -->line:68] - INFO:测试编号:3,测试用例标题:错误的用户名,执行成功！
2021-06-23 10:59:44,041 - [test_Login04.py -->line:63] - ERROR:测试编号:4,测试用例标题:大小写区分,执行失败,实际结果为:{'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0NzE4My45NjM3ODQ1OjkzY2UyZDEyNDBhOTllN2IzYjVkMzI3NTZhOTAzODU4ZjI5Mzc1Yjk='}
2021-06-23 10:59:44,041 - [test_Login04.py -->line:64] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0NzE4M[64 chars]jk='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYyNDQ0NzE4My45NjM3ODQ1OjkzY2UyZDEyNDBhOTllN2IzYjVkMzI3NTZhOTAzODU4ZjI5Mzc1Yjk='}
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_login02\test_Login04.py", line 60, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0NzE4M[64 chars]jk='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYyNDQ0NzE4My45NjM3ODQ1OjkzY2UyZDEyNDBhOTllN2IzYjVkMzI3NTZhOTAzODU4ZjI5Mzc1Yjk='}
2021-06-23 10:59:44,151 - [test_Login04.py -->line:68] - INFO:测试编号:5,测试用例标题:密码为空,执行成功！
2021-06-23 10:59:44,260 - [test_Login04.py -->line:68] - INFO:测试编号:6,测试用例标题:密码错误,执行成功！
2021-06-23 10:59:44,323 - [test_Login04.py -->line:63] - ERROR:测试编号:7,测试用例标题:大小写区分,执行失败,实际结果为:{'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0NzE4NC4yNjA1ODQ6YWI5OTVmNTczMDhiYWZhYmI0OTM4NTlkZTEyYzY4NmE2NDcxOWQ4ZQ=='}
2021-06-23 10:59:44,323 - [test_Login04.py -->line:64] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0NzE4N[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYyNDQ0NzE4NC4yNjA1ODQ6YWI5OTVmNTczMDhiYWZhYmI0OTM4NTlkZTEyYzY4NmE2NDcxOWQ4ZQ=='}
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_login02\test_Login04.py", line 60, in test_login
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYyNDQ0NzE4N[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYyNDQ0NzE4NC4yNjA1ODQ6YWI5OTVmNTczMDhiYWZhYmI0OTM4NTlkZTEyYzY4NmE2NDcxOWQ4ZQ=='}
2021-06-23 10:59:44,386 - [test_Login04.py -->line:68] - INFO:测试编号:8,测试用例标题:用户类型为空,执行成功！
2021-06-23 10:59:44,433 - [test_Login04.py -->line:68] - INFO:测试编号:9,测试用例标题:用户类型非枚举,执行成功！
2021-06-23 10:59:44,480 - [test_Login04.py -->line:68] - INFO:测试编号:10,测试用例标题:非普通用户,执行成功！
2021-06-23 10:59:44,527 - [test_Login04.py -->line:68] - INFO:测试编号:11,测试用例标题:格式错误,执行成功！
2021-06-23 10:59:44,605 - [test_login07.py -->line:51] - INFO:测试编号1,测试用例的标题为:登录成功,执行成功！
2021-06-23 10:59:44,652 - [test_login07.py -->line:51] - INFO:测试编号2,测试用例的标题为:用户名为空,执行成功！
2021-06-23 10:59:44,699 - [test_login07.py -->line:51] - INFO:测试编号3,测试用例的标题为:用户名或密码错误,执行成功！
2021-06-23 10:59:44,766 - [test_login07.py -->line:51] - INFO:测试编号4,测试用例的标题为:密码为空,执行成功！
2021-06-23 10:59:44,813 - [test_login07.py -->line:51] - INFO:测试编号5,测试用例的标题为:用户名或密码错误,执行成功！
2021-06-23 10:59:44,876 - [test_regist07.py -->line:49] - INFO:测试编号1,测试用例标题正确流程,执行成功
2021-06-23 10:59:44,922 - [test_regist07.py -->line:49] - INFO:测试编号2,测试用例标题用户名为空,执行成功
2021-06-23 10:59:44,969 - [test_regist07.py -->line:49] - INFO:测试编号3,测试用例标题密码为空,执行成功
2021-06-23 10:59:45,016 - [test_regist07.py -->line:49] - INFO:测试编号4,测试用例标题确认密码不能为空,执行成功
2021-06-23 10:59:45,094 - [test_regist07.py -->line:49] - INFO:测试编号5,测试用例标题用户名已经存在,执行成功
2021-06-23 10:59:45,141 - [test_regist07.py -->line:49] - INFO:测试编号6,测试用例标题密码和确认密码不一致,执行成功
2021-06-23 10:59:45,188 - [test_regist07.py -->line:49] - INFO:测试编号7,测试用例标题用户名小于6位,执行成功
2021-06-23 10:59:45,236 - [test_regist07.py -->line:49] - INFO:测试编号8,测试用例标题用户名大于18位,执行成功
2021-06-23 10:59:45,283 - [test_regist07.py -->line:49] - INFO:测试编号9,测试用例标题密码小于6位,执行成功
2021-06-23 10:59:45,330 - [test_regist07.py -->line:49] - INFO:测试编号10,测试用例标题密码大于18位,执行成功
2021-06-23 10:59:45,392 - [test_regist07.py -->line:49] - INFO:测试编号11,测试用例标题密码17位,执行成功
2021-06-23 10:59:45,439 - [test_regist07.py -->line:44] - ERROR:测试编号12,测试用例标题邮箱不能为空,执行失败,实际结果：{'code': 1006, 'msg': '邮箱不能为空'}
2021-06-23 10:59:45,439 - [test_regist07.py -->line:45] - ERROR:{'code': 10066, 'msg': '邮箱不能为空'} != {'code': 1006, 'msg': '邮箱不能为空'}
- {'code': 10066, 'msg': '邮箱不能为空'}
?              -

+ {'code': 1006, 'msg': '邮箱不能为空'}
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_my_interface01\test_regist07.py", line 40, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 10066, 'msg': '邮箱不能为空'} != {'code': 1006, 'msg': '邮箱不能为空'}
- {'code': 10066, 'msg': '邮箱不能为空'}
?              -

+ {'code': 1006, 'msg': '邮箱不能为空'}
2021-06-23 15:38:19,993 - [test_business_regist01.py -->line:44] - INFO:测试编号:1,测试用例标题:注册成功,执行成功!
2021-06-23 15:52:17,818 - [test_business_regist02.py -->line:57] - INFO:测试编号:1,测试用例标题:注册成功,执行成功!
2021-06-23 15:52:22,924 - [test_business_regist02.py -->line:57] - INFO:测试编号:1,测试用例标题:注册成功,执行成功!
2021-06-23 15:52:27,316 - [test_business_regist02.py -->line:57] - INFO:测试编号:1,测试用例标题:注册成功,执行成功!
2021-06-23 16:30:33,575 - [test_business_regist03.py -->line:66] - INFO:测试编号:1,测试用例标题:注册成功,执行成功!
2021-06-23 16:30:54,368 - [test_business_regist03.py -->line:66] - INFO:测试编号:1,测试用例标题:注册成功,执行成功!
2021-06-23 16:30:54,529 - [test_business_regist03.py -->line:66] - INFO:测试编号:2,测试用例标题:用户名为空,执行成功!
2021-06-23 16:30:54,692 - [test_business_regist03.py -->line:61] - ERROR:测试编号:3,测试用例标题:用户名有效边界值,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:30:54,693 - [test_business_regist03.py -->line:62] - ERROR: :: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_regist03\test_business_regist03.py", line 53, in test_register
    self.assertEqual(eval(case.expect), res)  # 判定响应结果
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:30:54,860 - [test_business_regist03.py -->line:66] - INFO:测试编号:4,测试用例标题:用户名无效边界值,执行成功!
2021-06-23 16:30:54,991 - [test_business_regist03.py -->line:66] - INFO:测试编号:5,测试用例标题:用户名非字母开头,执行成功!
2021-06-23 16:30:55,078 - [test_business_regist03.py -->line:66] - INFO:测试编号:6,测试用例标题:用户名包含符号,执行成功!
2021-06-23 16:30:55,157 - [test_business_regist03.py -->line:66] - INFO:测试编号:7,测试用例标题:用户名包含汉字,执行成功!
2021-06-23 16:30:55,237 - [test_business_regist03.py -->line:66] - INFO:测试编号:8,测试用例标题:用户名已注册,执行成功!
2021-06-23 16:30:55,317 - [test_business_regist03.py -->line:66] - INFO:测试编号:9,测试用例标题:密码为空,执行成功!
2021-06-23 16:30:55,397 - [test_business_regist03.py -->line:61] - ERROR:测试编号:10,测试用例标题:密码有效边界值,执行失败,实际结果为:{'code': 1007, 'msg': '两次密码不一致'}
2021-06-23 16:30:55,397 - [test_business_regist03.py -->line:62] - ERROR: :: {'code': 1000, 'msg': '注册成功'} != {'code': 1007, 'msg': '两次密码不一致'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '注册成功'} != {'code': 1007, 'msg': '两次密码不一致'}
- {'code': 1000, 'msg': '注册成功'}
?             ^          ^^^^

+ {'code': 1007, 'msg': '两次密码不一致'}
?             ^          ^^^^^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_regist03\test_business_regist03.py", line 53, in test_register
    self.assertEqual(eval(case.expect), res)  # 判定响应结果
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1000, 'msg': '注册成功'} != {'code': 1007, 'msg': '两次密码不一致'}
2021-06-23 16:30:55,477 - [test_business_regist03.py -->line:66] - INFO:测试编号:11,测试用例标题:密码无效边界值,执行成功!
2021-06-23 16:30:55,558 - [test_business_regist03.py -->line:66] - INFO:测试编号:12,测试用例标题:确认密码和密码不一致,执行成功!
2021-06-23 16:30:55,639 - [test_business_regist03.py -->line:66] - INFO:测试编号:13,测试用例标题:确认密码为空,执行成功!
2021-06-23 16:30:55,719 - [test_business_regist03.py -->line:66] - INFO:测试编号:14,测试用例标题:确认密码区分大小写,执行成功!
2021-06-23 16:30:55,799 - [test_business_regist03.py -->line:66] - INFO:测试编号:15,测试用例标题:正确密码+其他,执行成功!
2021-06-23 16:30:55,880 - [test_business_regist03.py -->line:66] - INFO:测试编号:16,测试用例标题:手机号码为空,执行成功!
2021-06-23 16:30:55,961 - [test_business_regist03.py -->line:61] - ERROR:测试编号:17,测试用例标题:手机号码不支持号段,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:30:55,961 - [test_business_regist03.py -->line:62] - ERROR: :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_regist03\test_business_regist03.py", line 53, in test_register
    self.assertEqual(eval(case.expect), res)  # 判定响应结果
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:30:56,043 - [test_business_regist03.py -->line:66] - INFO:测试编号:18,测试用例标题:手机号码非11位数字,执行成功!
2021-06-23 16:30:56,123 - [test_business_regist03.py -->line:66] - INFO:测试编号:19,测试用例标题:手机号码非数字,执行成功!
2021-06-23 16:30:56,204 - [test_business_regist03.py -->line:66] - INFO:测试编号:20,测试用例标题:手机号已注册,执行成功!
2021-06-23 16:30:56,284 - [test_business_regist03.py -->line:61] - ERROR:测试编号:21,测试用例标题:性别为空,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:30:56,284 - [test_business_regist03.py -->line:62] - ERROR: :: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_regist03\test_business_regist03.py", line 53, in test_register
    self.assertEqual(eval(case.expect), res)  # 判定响应结果
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:30:56,369 - [test_business_regist03.py -->line:66] - INFO:测试编号:22,测试用例标题:性别非枚举,执行成功!
2021-06-23 16:30:56,453 - [test_business_regist03.py -->line:66] - INFO:测试编号:23,测试用例标题:性别为男+女,执行成功!
2021-06-23 16:30:56,534 - [test_business_regist03.py -->line:61] - ERROR:测试编号:24,测试用例标题:出生日期为空,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:30:56,534 - [test_business_regist03.py -->line:62] - ERROR: :: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_regist03\test_business_regist03.py", line 53, in test_register
    self.assertEqual(eval(case.expect), res)  # 判定响应结果
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:30:56,616 - [test_business_regist03.py -->line:66] - INFO:测试编号:25,测试用例标题:出生日期格式错误,执行成功!
2021-06-23 16:30:56,712 - [test_business_regist03.py -->line:61] - ERROR:测试编号:26,测试用例标题:出生日期不存在的日期,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:30:56,712 - [test_business_regist03.py -->line:62] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_regist03\test_business_regist03.py", line 53, in test_register
    self.assertEqual(eval(case.expect), res)  # 判定响应结果
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:30:56,798 - [test_business_regist03.py -->line:61] - ERROR:测试编号:27,测试用例标题:出生日期超过当天,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:30:56,798 - [test_business_regist03.py -->line:62] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_regist03\test_business_regist03.py", line 53, in test_register
    self.assertEqual(eval(case.expect), res)  # 判定响应结果
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:30:56,883 - [test_business_regist03.py -->line:61] - ERROR:测试编号:28,测试用例标题:出生日期超出合理时间期限,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:30:56,883 - [test_business_regist03.py -->line:62] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_regist03\test_business_regist03.py", line 53, in test_register
    self.assertEqual(eval(case.expect), res)  # 判定响应结果
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:30:56,966 - [test_business_regist03.py -->line:61] - ERROR:测试编号:29,测试用例标题:qq号码为空,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:30:56,966 - [test_business_regist03.py -->line:62] - ERROR: :: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_regist03\test_business_regist03.py", line 53, in test_register
    self.assertEqual(eval(case.expect), res)  # 判定响应结果
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:30:57,051 - [test_business_regist03.py -->line:61] - ERROR:测试编号:30,测试用例标题:qq号码有效边界值,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:30:57,052 - [test_business_regist03.py -->line:62] - ERROR: :: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_regist03\test_business_regist03.py", line 53, in test_register
    self.assertEqual(eval(case.expect), res)  # 判定响应结果
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:30:57,149 - [test_business_regist03.py -->line:66] - INFO:测试编号:31,测试用例标题:qq号码无效边界值,执行成功!
2021-06-23 16:30:57,239 - [test_business_regist03.py -->line:66] - INFO:测试编号:32,测试用例标题:qq号码非数字,执行成功!
2021-06-23 16:30:57,319 - [test_business_regist03.py -->line:61] - ERROR:测试编号:33,测试用例标题:email为空,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:30:57,320 - [test_business_regist03.py -->line:62] - ERROR: :: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_regist03\test_business_regist03.py", line 53, in test_register
    self.assertEqual(eval(case.expect), res)  # 判定响应结果
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:30:57,404 - [test_business_regist03.py -->line:66] - INFO:测试编号:34,测试用例标题:email格式错误,执行成功!
2021-06-23 16:31:30,420 - [test_business_regist03.py -->line:66] - INFO:测试编号:1,测试用例标题:注册成功,执行成功!
2021-06-23 16:31:30,584 - [test_business_regist03.py -->line:66] - INFO:测试编号:2,测试用例标题:用户名为空,执行成功!
2021-06-23 16:31:30,743 - [test_business_regist03.py -->line:61] - ERROR:测试编号:3,测试用例标题:用户名有效边界值,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:31:30,743 - [test_business_regist03.py -->line:62] - ERROR: :: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_regist03\test_business_regist03.py", line 53, in test_register
    self.assertEqual(eval(case.expect), res)  # 判定响应结果
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:31:30,902 - [test_business_regist03.py -->line:66] - INFO:测试编号:4,测试用例标题:用户名无效边界值,执行成功!
2021-06-23 16:31:31,027 - [test_business_regist03.py -->line:66] - INFO:测试编号:5,测试用例标题:用户名非字母开头,执行成功!
2021-06-23 16:31:31,119 - [test_business_regist03.py -->line:66] - INFO:测试编号:6,测试用例标题:用户名包含符号,执行成功!
2021-06-23 16:31:31,203 - [test_business_regist03.py -->line:66] - INFO:测试编号:7,测试用例标题:用户名包含汉字,执行成功!
2021-06-23 16:31:31,281 - [test_business_regist03.py -->line:66] - INFO:测试编号:8,测试用例标题:用户名已注册,执行成功!
2021-06-23 16:31:31,358 - [test_business_regist03.py -->line:66] - INFO:测试编号:9,测试用例标题:密码为空,执行成功!
2021-06-23 16:31:31,435 - [test_business_regist03.py -->line:61] - ERROR:测试编号:10,测试用例标题:密码有效边界值,执行失败,实际结果为:{'code': 1007, 'msg': '两次密码不一致'}
2021-06-23 16:31:31,435 - [test_business_regist03.py -->line:62] - ERROR: :: {'code': 1000, 'msg': '注册成功'} != {'code': 1007, 'msg': '两次密码不一致'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '注册成功'} != {'code': 1007, 'msg': '两次密码不一致'}
- {'code': 1000, 'msg': '注册成功'}
?             ^          ^^^^

+ {'code': 1007, 'msg': '两次密码不一致'}
?             ^          ^^^^^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_regist03\test_business_regist03.py", line 53, in test_register
    self.assertEqual(eval(case.expect), res)  # 判定响应结果
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1000, 'msg': '注册成功'} != {'code': 1007, 'msg': '两次密码不一致'}
2021-06-23 16:31:31,515 - [test_business_regist03.py -->line:66] - INFO:测试编号:11,测试用例标题:密码无效边界值,执行成功!
2021-06-23 16:31:31,592 - [test_business_regist03.py -->line:66] - INFO:测试编号:12,测试用例标题:确认密码和密码不一致,执行成功!
2021-06-23 16:31:31,676 - [test_business_regist03.py -->line:66] - INFO:测试编号:13,测试用例标题:确认密码为空,执行成功!
2021-06-23 16:31:31,752 - [test_business_regist03.py -->line:66] - INFO:测试编号:14,测试用例标题:确认密码区分大小写,执行成功!
2021-06-23 16:31:31,829 - [test_business_regist03.py -->line:66] - INFO:测试编号:15,测试用例标题:正确密码+其他,执行成功!
2021-06-23 16:31:31,907 - [test_business_regist03.py -->line:66] - INFO:测试编号:16,测试用例标题:手机号码为空,执行成功!
2021-06-23 16:31:31,985 - [test_business_regist03.py -->line:61] - ERROR:测试编号:17,测试用例标题:手机号码不支持号段,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:31:31,985 - [test_business_regist03.py -->line:62] - ERROR: :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_regist03\test_business_regist03.py", line 53, in test_register
    self.assertEqual(eval(case.expect), res)  # 判定响应结果
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:31:32,066 - [test_business_regist03.py -->line:66] - INFO:测试编号:18,测试用例标题:手机号码非11位数字,执行成功!
2021-06-23 16:31:32,143 - [test_business_regist03.py -->line:66] - INFO:测试编号:19,测试用例标题:手机号码非数字,执行成功!
2021-06-23 16:31:32,222 - [test_business_regist03.py -->line:66] - INFO:测试编号:20,测试用例标题:手机号已注册,执行成功!
2021-06-23 16:33:52,871 - [test_business_regist03.py -->line:66] - INFO:测试编号:1,测试用例标题:注册成功,执行成功!
2021-06-23 16:33:53,027 - [test_business_regist03.py -->line:66] - INFO:测试编号:2,测试用例标题:用户名为空,执行成功!
2021-06-23 16:33:53,203 - [test_business_regist03.py -->line:66] - INFO:测试编号:3,测试用例标题:用户名有效边界值,执行成功!
2021-06-23 16:33:53,360 - [test_business_regist03.py -->line:66] - INFO:测试编号:4,测试用例标题:用户名无效边界值,执行成功!
2021-06-23 16:33:53,489 - [test_business_regist03.py -->line:66] - INFO:测试编号:5,测试用例标题:用户名非字母开头,执行成功!
2021-06-23 16:33:53,567 - [test_business_regist03.py -->line:66] - INFO:测试编号:6,测试用例标题:用户名包含符号,执行成功!
2021-06-23 16:33:53,651 - [test_business_regist03.py -->line:66] - INFO:测试编号:7,测试用例标题:用户名包含汉字,执行成功!
2021-06-23 16:33:53,730 - [test_business_regist03.py -->line:61] - ERROR:测试编号:8,测试用例标题:用户名已注册,执行失败,实际结果为:{'code': 1000, 'msg': '注册成功'}
2021-06-23 16:33:53,731 - [test_business_regist03.py -->line:62] - ERROR: :: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_regist03\test_business_regist03.py", line 53, in test_register
    self.assertEqual(eval(case.expect), res)  # 判定响应结果
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
2021-06-23 16:33:53,809 - [test_business_regist03.py -->line:66] - INFO:测试编号:9,测试用例标题:密码为空,执行成功!
2021-06-23 16:33:53,888 - [test_business_regist03.py -->line:61] - ERROR:测试编号:10,测试用例标题:密码有效边界值,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:33:53,888 - [test_business_regist03.py -->line:62] - ERROR: :: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_regist03\test_business_regist03.py", line 53, in test_register
    self.assertEqual(eval(case.expect), res)  # 判定响应结果
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:33:53,975 - [test_business_regist03.py -->line:66] - INFO:测试编号:11,测试用例标题:密码无效边界值,执行成功!
2021-06-23 16:33:54,048 - [test_business_regist03.py -->line:66] - INFO:测试编号:12,测试用例标题:确认密码和密码不一致,执行成功!
2021-06-23 16:33:54,128 - [test_business_regist03.py -->line:66] - INFO:测试编号:13,测试用例标题:确认密码为空,执行成功!
2021-06-23 16:33:54,210 - [test_business_regist03.py -->line:66] - INFO:测试编号:14,测试用例标题:确认密码区分大小写,执行成功!
2021-06-23 16:33:54,286 - [test_business_regist03.py -->line:66] - INFO:测试编号:15,测试用例标题:正确密码+其他,执行成功!
2021-06-23 16:33:54,373 - [test_business_regist03.py -->line:66] - INFO:测试编号:16,测试用例标题:手机号码为空,执行成功!
2021-06-23 16:33:54,496 - [test_business_regist03.py -->line:61] - ERROR:测试编号:17,测试用例标题:手机号码不支持号段,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:33:54,497 - [test_business_regist03.py -->line:62] - ERROR: :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_regist03\test_business_regist03.py", line 53, in test_register
    self.assertEqual(eval(case.expect), res)  # 判定响应结果
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:33:54,577 - [test_business_regist03.py -->line:66] - INFO:测试编号:18,测试用例标题:手机号码非11位数字,执行成功!
2021-06-23 16:33:54,656 - [test_business_regist03.py -->line:66] - INFO:测试编号:19,测试用例标题:手机号码非数字,执行成功!
2021-06-23 16:33:54,735 - [test_business_regist03.py -->line:66] - INFO:测试编号:20,测试用例标题:手机号已注册,执行成功!
2021-06-23 16:40:27,775 - [test_business_regist03.py -->line:69] - INFO:测试编号:1,测试用例标题:注册成功,执行成功!
2021-06-23 16:40:27,934 - [test_business_regist03.py -->line:69] - INFO:测试编号:2,测试用例标题:用户名为空,执行成功!
2021-06-23 16:40:28,108 - [test_business_regist03.py -->line:69] - INFO:测试编号:3,测试用例标题:用户名有效边界值,执行成功!
2021-06-23 16:40:28,262 - [test_business_regist03.py -->line:69] - INFO:测试编号:4,测试用例标题:用户名无效边界值,执行成功!
2021-06-23 16:40:28,396 - [test_business_regist03.py -->line:69] - INFO:测试编号:5,测试用例标题:用户名非字母开头,执行成功!
2021-06-23 16:40:28,472 - [test_business_regist03.py -->line:69] - INFO:测试编号:6,测试用例标题:用户名包含符号,执行成功!
2021-06-23 16:40:28,555 - [test_business_regist03.py -->line:69] - INFO:测试编号:7,测试用例标题:用户名包含汉字,执行成功!
2021-06-23 16:40:28,638 - [test_business_regist03.py -->line:69] - INFO:测试编号:8,测试用例标题:用户名已注册,执行成功!
2021-06-23 16:40:28,714 - [test_business_regist03.py -->line:69] - INFO:测试编号:9,测试用例标题:密码为空,执行成功!
2021-06-23 16:40:28,807 - [test_business_regist03.py -->line:69] - INFO:测试编号:10,测试用例标题:密码有效边界值,执行成功!
2021-06-23 16:40:28,884 - [test_business_regist03.py -->line:69] - INFO:测试编号:11,测试用例标题:密码无效边界值,执行成功!
2021-06-23 16:40:28,962 - [test_business_regist03.py -->line:69] - INFO:测试编号:12,测试用例标题:确认密码和密码不一致,执行成功!
2021-06-23 16:40:29,039 - [test_business_regist03.py -->line:69] - INFO:测试编号:13,测试用例标题:确认密码为空,执行成功!
2021-06-23 16:40:29,116 - [test_business_regist03.py -->line:69] - INFO:测试编号:14,测试用例标题:确认密码区分大小写,执行成功!
2021-06-23 16:40:29,191 - [test_business_regist03.py -->line:69] - INFO:测试编号:15,测试用例标题:正确密码+其他,执行成功!
2021-06-23 16:40:29,268 - [test_business_regist03.py -->line:69] - INFO:测试编号:16,测试用例标题:手机号码为空,执行成功!
2021-06-23 16:40:29,347 - [test_business_regist03.py -->line:64] - ERROR:测试编号:17,测试用例标题:手机号码不支持号段,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:40:29,347 - [test_business_regist03.py -->line:65] - ERROR: :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_regist03\test_business_regist03.py", line 56, in test_register
    self.assertEqual(eval(case.expect), res)  # 判定响应结果
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:40:29,426 - [test_business_regist03.py -->line:69] - INFO:测试编号:18,测试用例标题:手机号码非11位数字,执行成功!
2021-06-23 16:40:29,505 - [test_business_regist03.py -->line:69] - INFO:测试编号:19,测试用例标题:手机号码非数字,执行成功!
2021-06-23 16:40:29,588 - [test_business_regist03.py -->line:69] - INFO:测试编号:20,测试用例标题:手机号已注册,执行成功!
2021-06-23 16:40:33,771 - [test_business_regist03.py -->line:69] - INFO:测试编号:1,测试用例标题:注册成功,执行成功!
2021-06-23 16:40:33,925 - [test_business_regist03.py -->line:69] - INFO:测试编号:2,测试用例标题:用户名为空,执行成功!
2021-06-23 16:40:34,101 - [test_business_regist03.py -->line:69] - INFO:测试编号:3,测试用例标题:用户名有效边界值,执行成功!
2021-06-23 16:40:34,259 - [test_business_regist03.py -->line:69] - INFO:测试编号:4,测试用例标题:用户名无效边界值,执行成功!
2021-06-23 16:40:34,400 - [test_business_regist03.py -->line:69] - INFO:测试编号:5,测试用例标题:用户名非字母开头,执行成功!
2021-06-23 16:40:34,479 - [test_business_regist03.py -->line:69] - INFO:测试编号:6,测试用例标题:用户名包含符号,执行成功!
2021-06-23 16:40:34,563 - [test_business_regist03.py -->line:69] - INFO:测试编号:7,测试用例标题:用户名包含汉字,执行成功!
2021-06-23 16:40:34,644 - [test_business_regist03.py -->line:69] - INFO:测试编号:8,测试用例标题:用户名已注册,执行成功!
2021-06-23 16:40:34,722 - [test_business_regist03.py -->line:69] - INFO:测试编号:9,测试用例标题:密码为空,执行成功!
2021-06-23 16:40:34,816 - [test_business_regist03.py -->line:69] - INFO:测试编号:10,测试用例标题:密码有效边界值,执行成功!
2021-06-23 16:40:34,891 - [test_business_regist03.py -->line:69] - INFO:测试编号:11,测试用例标题:密码无效边界值,执行成功!
2021-06-23 16:40:34,967 - [test_business_regist03.py -->line:69] - INFO:测试编号:12,测试用例标题:确认密码和密码不一致,执行成功!
2021-06-23 16:40:35,045 - [test_business_regist03.py -->line:69] - INFO:测试编号:13,测试用例标题:确认密码为空,执行成功!
2021-06-23 16:40:35,122 - [test_business_regist03.py -->line:69] - INFO:测试编号:14,测试用例标题:确认密码区分大小写,执行成功!
2021-06-23 16:40:35,198 - [test_business_regist03.py -->line:69] - INFO:测试编号:15,测试用例标题:正确密码+其他,执行成功!
2021-06-23 16:40:35,293 - [test_business_regist03.py -->line:69] - INFO:测试编号:16,测试用例标题:手机号码为空,执行成功!
2021-06-23 16:40:35,378 - [test_business_regist03.py -->line:64] - ERROR:测试编号:17,测试用例标题:手机号码不支持号段,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:40:35,379 - [test_business_regist03.py -->line:65] - ERROR: :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_regist03\test_business_regist03.py", line 56, in test_register
    self.assertEqual(eval(case.expect), res)  # 判定响应结果
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:40:35,459 - [test_business_regist03.py -->line:69] - INFO:测试编号:18,测试用例标题:手机号码非11位数字,执行成功!
2021-06-23 16:40:35,536 - [test_business_regist03.py -->line:69] - INFO:测试编号:19,测试用例标题:手机号码非数字,执行成功!
2021-06-23 16:40:35,615 - [test_business_regist03.py -->line:69] - INFO:测试编号:20,测试用例标题:手机号已注册,执行成功!
2021-06-23 16:40:38,585 - [test_business_regist03.py -->line:69] - INFO:测试编号:1,测试用例标题:注册成功,执行成功!
2021-06-23 16:40:38,743 - [test_business_regist03.py -->line:69] - INFO:测试编号:2,测试用例标题:用户名为空,执行成功!
2021-06-23 16:40:38,943 - [test_business_regist03.py -->line:69] - INFO:测试编号:3,测试用例标题:用户名有效边界值,执行成功!
2021-06-23 16:40:39,098 - [test_business_regist03.py -->line:69] - INFO:测试编号:4,测试用例标题:用户名无效边界值,执行成功!
2021-06-23 16:40:39,226 - [test_business_regist03.py -->line:69] - INFO:测试编号:5,测试用例标题:用户名非字母开头,执行成功!
2021-06-23 16:40:39,305 - [test_business_regist03.py -->line:69] - INFO:测试编号:6,测试用例标题:用户名包含符号,执行成功!
2021-06-23 16:40:39,388 - [test_business_regist03.py -->line:69] - INFO:测试编号:7,测试用例标题:用户名包含汉字,执行成功!
2021-06-23 16:40:39,471 - [test_business_regist03.py -->line:69] - INFO:测试编号:8,测试用例标题:用户名已注册,执行成功!
2021-06-23 16:40:39,547 - [test_business_regist03.py -->line:69] - INFO:测试编号:9,测试用例标题:密码为空,执行成功!
2021-06-23 16:40:39,663 - [test_business_regist03.py -->line:69] - INFO:测试编号:10,测试用例标题:密码有效边界值,执行成功!
2021-06-23 16:40:39,740 - [test_business_regist03.py -->line:69] - INFO:测试编号:11,测试用例标题:密码无效边界值,执行成功!
2021-06-23 16:40:39,816 - [test_business_regist03.py -->line:69] - INFO:测试编号:12,测试用例标题:确认密码和密码不一致,执行成功!
2021-06-23 16:40:39,893 - [test_business_regist03.py -->line:69] - INFO:测试编号:13,测试用例标题:确认密码为空,执行成功!
2021-06-23 16:40:39,982 - [test_business_regist03.py -->line:69] - INFO:测试编号:14,测试用例标题:确认密码区分大小写,执行成功!
2021-06-23 16:40:40,066 - [test_business_regist03.py -->line:69] - INFO:测试编号:15,测试用例标题:正确密码+其他,执行成功!
2021-06-23 16:40:40,143 - [test_business_regist03.py -->line:69] - INFO:测试编号:16,测试用例标题:手机号码为空,执行成功!
2021-06-23 16:40:40,222 - [test_business_regist03.py -->line:64] - ERROR:测试编号:17,测试用例标题:手机号码不支持号段,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:40:40,223 - [test_business_regist03.py -->line:65] - ERROR: :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_regist03\test_business_regist03.py", line 56, in test_register
    self.assertEqual(eval(case.expect), res)  # 判定响应结果
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:40:40,300 - [test_business_regist03.py -->line:69] - INFO:测试编号:18,测试用例标题:手机号码非11位数字,执行成功!
2021-06-23 16:40:40,376 - [test_business_regist03.py -->line:69] - INFO:测试编号:19,测试用例标题:手机号码非数字,执行成功!
2021-06-23 16:40:40,460 - [test_business_regist03.py -->line:69] - INFO:测试编号:20,测试用例标题:手机号已注册,执行成功!
2021-06-23 16:51:00,737 - [test_business_regist04.py -->line:64] - INFO:测试编号:1,测试用例标题:注册成功,执行成功!
2021-06-23 16:51:00,894 - [test_business_regist04.py -->line:64] - INFO:测试编号:2,测试用例标题:用户名为空,执行成功!
2021-06-23 16:51:01,068 - [test_business_regist04.py -->line:64] - INFO:测试编号:3,测试用例标题:用户名有效边界值,执行成功!
2021-06-23 16:51:01,207 - [test_business_regist04.py -->line:64] - INFO:测试编号:4,测试用例标题:用户名无效边界值,执行成功!
2021-06-23 16:51:01,305 - [test_business_regist04.py -->line:64] - INFO:测试编号:5,测试用例标题:用户名非字母开头,执行成功!
2021-06-23 16:51:01,382 - [test_business_regist04.py -->line:64] - INFO:测试编号:6,测试用例标题:用户名包含符号,执行成功!
2021-06-23 16:51:01,457 - [test_business_regist04.py -->line:64] - INFO:测试编号:7,测试用例标题:用户名包含汉字,执行成功!
2021-06-23 16:51:01,538 - [test_business_regist04.py -->line:64] - INFO:测试编号:8,测试用例标题:用户名已注册,执行成功!
2021-06-23 16:51:01,614 - [test_business_regist04.py -->line:64] - INFO:测试编号:9,测试用例标题:密码为空,执行成功!
2021-06-23 16:51:01,705 - [test_business_regist04.py -->line:64] - INFO:测试编号:10,测试用例标题:密码有效边界值,执行成功!
2021-06-23 16:51:01,780 - [test_business_regist04.py -->line:64] - INFO:测试编号:11,测试用例标题:密码无效边界值,执行成功!
2021-06-23 16:51:01,856 - [test_business_regist04.py -->line:64] - INFO:测试编号:12,测试用例标题:确认密码和密码不一致,执行成功!
2021-06-23 16:51:01,933 - [test_business_regist04.py -->line:64] - INFO:测试编号:13,测试用例标题:确认密码为空,执行成功!
2021-06-23 16:51:02,010 - [test_business_regist04.py -->line:64] - INFO:测试编号:14,测试用例标题:确认密码区分大小写,执行成功!
2021-06-23 16:51:02,089 - [test_business_regist04.py -->line:64] - INFO:测试编号:15,测试用例标题:正确密码+其他,执行成功!
2021-06-23 16:51:02,167 - [test_business_regist04.py -->line:64] - INFO:测试编号:16,测试用例标题:手机号码为空,执行成功!
2021-06-23 16:51:02,247 - [test_business_regist04.py -->line:59] - ERROR:测试编号:17,测试用例标题:手机号码不支持号段,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:51:02,247 - [test_business_regist04.py -->line:60] - ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_regist03\test_business_regist04.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res)  # 判定响应结果
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:51:02,326 - [test_business_regist04.py -->line:64] - INFO:测试编号:18,测试用例标题:手机号码非11位数字,执行成功!
2021-06-23 16:51:02,405 - [test_business_regist04.py -->line:64] - INFO:测试编号:19,测试用例标题:手机号码非数字,执行成功!
2021-06-23 16:51:02,484 - [test_business_regist04.py -->line:64] - INFO:测试编号:20,测试用例标题:手机号已注册,执行成功!
2021-06-23 16:51:02,577 - [test_Login04.py -->line:68] - INFO:测试编号:1,测试用例标题:登录成功,执行成功！
2021-06-23 16:51:02,655 - [test_Login04.py -->line:68] - INFO:测试编号:2,测试用例标题:用户名为空,执行成功！
2021-06-23 16:51:02,734 - [test_Login04.py -->line:68] - INFO:测试编号:3,测试用例标题:错误的用户名,执行成功！
2021-06-23 16:51:02,819 - [test_Login04.py -->line:68] - INFO:测试编号:4,测试用例标题:大小写区分,执行成功！
2021-06-23 16:51:02,894 - [test_Login04.py -->line:68] - INFO:测试编号:5,测试用例标题:密码为空,执行成功！
2021-06-23 16:51:02,971 - [test_Login04.py -->line:68] - INFO:测试编号:6,测试用例标题:密码错误,执行成功！
2021-06-23 16:51:03,087 - [test_Login04.py -->line:68] - INFO:测试编号:7,测试用例标题:大小写区分,执行成功！
2021-06-23 16:51:03,165 - [test_Login04.py -->line:68] - INFO:测试编号:8,测试用例标题:用户类型为空,执行成功！
2021-06-23 16:51:03,244 - [test_Login04.py -->line:68] - INFO:测试编号:9,测试用例标题:用户类型非枚举,执行成功！
2021-06-23 16:51:03,323 - [test_Login04.py -->line:68] - INFO:测试编号:10,测试用例标题:非普通用户,执行成功！
2021-06-23 16:51:03,401 - [test_Login04.py -->line:68] - INFO:测试编号:11,测试用例标题:格式错误,执行成功！
2021-06-23 16:51:03,494 - [test_login07.py -->line:51] - INFO:测试编号1,测试用例的标题为:登录成功,执行成功！
2021-06-23 16:51:03,571 - [test_login07.py -->line:51] - INFO:测试编号2,测试用例的标题为:用户名为空,执行成功！
2021-06-23 16:51:03,650 - [test_login07.py -->line:51] - INFO:测试编号3,测试用例的标题为:用户名或密码错误,执行成功！
2021-06-23 16:51:03,727 - [test_login07.py -->line:51] - INFO:测试编号4,测试用例的标题为:密码为空,执行成功！
2021-06-23 16:51:03,805 - [test_login07.py -->line:51] - INFO:测试编号5,测试用例的标题为:用户名或密码错误,执行成功！
2021-06-23 16:51:03,918 - [test_regist07.py -->line:49] - INFO:测试编号1,测试用例标题正确流程,执行成功
2021-06-23 16:51:04,004 - [test_regist07.py -->line:49] - INFO:测试编号2,测试用例标题用户名为空,执行成功
2021-06-23 16:51:04,116 - [test_regist07.py -->line:49] - INFO:测试编号3,测试用例标题密码为空,执行成功
2021-06-23 16:51:04,195 - [test_regist07.py -->line:49] - INFO:测试编号4,测试用例标题确认密码不能为空,执行成功
2021-06-23 16:51:04,291 - [test_regist07.py -->line:49] - INFO:测试编号5,测试用例标题用户名已经存在,执行成功
2021-06-23 16:51:04,371 - [test_regist07.py -->line:49] - INFO:测试编号6,测试用例标题密码和确认密码不一致,执行成功
2021-06-23 16:51:04,448 - [test_regist07.py -->line:49] - INFO:测试编号7,测试用例标题用户名小于6位,执行成功
2021-06-23 16:51:04,526 - [test_regist07.py -->line:49] - INFO:测试编号8,测试用例标题用户名大于18位,执行成功
2021-06-23 16:51:04,603 - [test_regist07.py -->line:49] - INFO:测试编号9,测试用例标题密码小于6位,执行成功
2021-06-23 16:51:04,681 - [test_regist07.py -->line:49] - INFO:测试编号10,测试用例标题密码大于18位,执行成功
2021-06-23 16:51:04,760 - [test_regist07.py -->line:49] - INFO:测试编号11,测试用例标题密码17位,执行成功
2021-06-23 16:51:04,838 - [test_regist07.py -->line:44] - ERROR:测试编号12,测试用例标题邮箱不能为空,执行失败,实际结果：{'code': 1006, 'msg': '邮箱不能为空'}
2021-06-23 16:51:04,838 - [test_regist07.py -->line:45] - ERROR:{'code': 10066, 'msg': '邮箱不能为空'} != {'code': 1006, 'msg': '邮箱不能为空'}
- {'code': 10066, 'msg': '邮箱不能为空'}
?              -

+ {'code': 1006, 'msg': '邮箱不能为空'}
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_my_interface01\test_regist07.py", line 40, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 10066, 'msg': '邮箱不能为空'} != {'code': 1006, 'msg': '邮箱不能为空'}
- {'code': 10066, 'msg': '邮箱不能为空'}
?              -

+ {'code': 1006, 'msg': '邮箱不能为空'}
2021-06-23 16:52:16,945 - [test_business_regist04.py -->line:64] - INFO:测试编号:1,测试用例标题:注册成功,执行成功!
2021-06-23 16:52:17,140 - [test_business_regist04.py -->line:64] - INFO:测试编号:2,测试用例标题:用户名为空,执行成功!
2021-06-23 16:52:17,367 - [test_business_regist04.py -->line:64] - INFO:测试编号:3,测试用例标题:用户名有效边界值,执行成功!
2021-06-23 16:52:17,529 - [test_business_regist04.py -->line:64] - INFO:测试编号:4,测试用例标题:用户名无效边界值,执行成功!
2021-06-23 16:52:17,616 - [test_business_regist04.py -->line:64] - INFO:测试编号:5,测试用例标题:用户名非字母开头,执行成功!
2021-06-23 16:52:17,695 - [test_business_regist04.py -->line:64] - INFO:测试编号:6,测试用例标题:用户名包含符号,执行成功!
2021-06-23 16:52:17,771 - [test_business_regist04.py -->line:64] - INFO:测试编号:7,测试用例标题:用户名包含汉字,执行成功!
2021-06-23 16:52:17,854 - [test_business_regist04.py -->line:64] - INFO:测试编号:8,测试用例标题:用户名已注册,执行成功!
2021-06-23 16:52:17,929 - [test_business_regist04.py -->line:64] - INFO:测试编号:9,测试用例标题:密码为空,执行成功!
2021-06-23 16:52:18,026 - [test_business_regist04.py -->line:64] - INFO:测试编号:10,测试用例标题:密码有效边界值,执行成功!
2021-06-23 16:52:18,105 - [test_business_regist04.py -->line:64] - INFO:测试编号:11,测试用例标题:密码无效边界值,执行成功!
2021-06-23 16:52:18,183 - [test_business_regist04.py -->line:64] - INFO:测试编号:12,测试用例标题:确认密码和密码不一致,执行成功!
2021-06-23 16:52:18,260 - [test_business_regist04.py -->line:64] - INFO:测试编号:13,测试用例标题:确认密码为空,执行成功!
2021-06-23 16:52:18,338 - [test_business_regist04.py -->line:64] - INFO:测试编号:14,测试用例标题:确认密码区分大小写,执行成功!
2021-06-23 16:52:18,416 - [test_business_regist04.py -->line:64] - INFO:测试编号:15,测试用例标题:正确密码+其他,执行成功!
2021-06-23 16:52:18,492 - [test_business_regist04.py -->line:64] - INFO:测试编号:16,测试用例标题:手机号码为空,执行成功!
2021-06-23 16:52:18,571 - [test_business_regist04.py -->line:59] - ERROR:测试编号:17,测试用例标题:手机号码不支持号段,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:52:18,571 - [test_business_regist04.py -->line:60] - ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_regist03\test_business_regist04.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res)  # 判定响应结果
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-23 16:52:18,649 - [test_business_regist04.py -->line:64] - INFO:测试编号:18,测试用例标题:手机号码非11位数字,执行成功!
2021-06-23 16:52:18,728 - [test_business_regist04.py -->line:64] - INFO:测试编号:19,测试用例标题:手机号码非数字,执行成功!
2021-06-23 16:52:18,809 - [test_business_regist04.py -->line:64] - INFO:测试编号:20,测试用例标题:手机号已注册,执行成功!
2021-06-23 16:52:18,912 - [test_Login04.py -->line:68] - INFO:测试编号:1,测试用例标题:登录成功,执行成功！
2021-06-23 16:52:18,991 - [test_Login04.py -->line:68] - INFO:测试编号:2,测试用例标题:用户名为空,执行成功！
2021-06-23 16:52:19,070 - [test_Login04.py -->line:68] - INFO:测试编号:3,测试用例标题:错误的用户名,执行成功！
2021-06-23 16:52:19,150 - [test_Login04.py -->line:68] - INFO:测试编号:4,测试用例标题:大小写区分,执行成功！
2021-06-23 16:52:19,228 - [test_Login04.py -->line:68] - INFO:测试编号:5,测试用例标题:密码为空,执行成功！
2021-06-23 16:52:19,307 - [test_Login04.py -->line:68] - INFO:测试编号:6,测试用例标题:密码错误,执行成功！
2021-06-23 16:52:19,398 - [test_Login04.py -->line:68] - INFO:测试编号:7,测试用例标题:大小写区分,执行成功！
2021-06-23 16:52:19,477 - [test_Login04.py -->line:68] - INFO:测试编号:8,测试用例标题:用户类型为空,执行成功！
2021-06-23 16:52:19,555 - [test_Login04.py -->line:68] - INFO:测试编号:9,测试用例标题:用户类型非枚举,执行成功！
2021-06-23 16:52:19,633 - [test_Login04.py -->line:68] - INFO:测试编号:10,测试用例标题:非普通用户,执行成功！
2021-06-23 16:52:19,711 - [test_Login04.py -->line:68] - INFO:测试编号:11,测试用例标题:格式错误,执行成功！
2021-06-23 16:52:19,807 - [test_login07.py -->line:51] - INFO:测试编号1,测试用例的标题为:登录成功,执行成功！
2021-06-23 16:52:19,887 - [test_login07.py -->line:51] - INFO:测试编号2,测试用例的标题为:用户名为空,执行成功！
2021-06-23 16:52:19,965 - [test_login07.py -->line:51] - INFO:测试编号3,测试用例的标题为:用户名或密码错误,执行成功！
2021-06-23 16:52:20,042 - [test_login07.py -->line:51] - INFO:测试编号4,测试用例的标题为:密码为空,执行成功！
2021-06-23 16:52:20,120 - [test_login07.py -->line:51] - INFO:测试编号5,测试用例的标题为:用户名或密码错误,执行成功！
2021-06-23 16:52:20,211 - [test_regist07.py -->line:49] - INFO:测试编号1,测试用例标题正确流程,执行成功
2021-06-23 16:52:20,292 - [test_regist07.py -->line:49] - INFO:测试编号2,测试用例标题用户名为空,执行成功
2021-06-23 16:52:20,371 - [test_regist07.py -->line:49] - INFO:测试编号3,测试用例标题密码为空,执行成功
2021-06-23 16:52:20,447 - [test_regist07.py -->line:49] - INFO:测试编号4,测试用例标题确认密码不能为空,执行成功
2021-06-23 16:52:20,544 - [test_regist07.py -->line:49] - INFO:测试编号5,测试用例标题用户名已经存在,执行成功
2021-06-23 16:52:20,637 - [test_regist07.py -->line:49] - INFO:测试编号6,测试用例标题密码和确认密码不一致,执行成功
2021-06-23 16:52:20,715 - [test_regist07.py -->line:49] - INFO:测试编号7,测试用例标题用户名小于6位,执行成功
2021-06-23 16:52:20,793 - [test_regist07.py -->line:49] - INFO:测试编号8,测试用例标题用户名大于18位,执行成功
2021-06-23 16:52:20,875 - [test_regist07.py -->line:49] - INFO:测试编号9,测试用例标题密码小于6位,执行成功
2021-06-23 16:52:20,961 - [test_regist07.py -->line:49] - INFO:测试编号10,测试用例标题密码大于18位,执行成功
2021-06-23 16:52:21,040 - [test_regist07.py -->line:49] - INFO:测试编号11,测试用例标题密码17位,执行成功
2021-06-23 16:52:21,120 - [test_regist07.py -->line:44] - ERROR:测试编号12,测试用例标题邮箱不能为空,执行失败,实际结果：{'code': 1006, 'msg': '邮箱不能为空'}
2021-06-23 16:52:21,120 - [test_regist07.py -->line:45] - ERROR:{'code': 10066, 'msg': '邮箱不能为空'} != {'code': 1006, 'msg': '邮箱不能为空'}
- {'code': 10066, 'msg': '邮箱不能为空'}
?              -

+ {'code': 1006, 'msg': '邮箱不能为空'}
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_my_interface01\test_regist07.py", line 40, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 10066, 'msg': '邮箱不能为空'} != {'code': 1006, 'msg': '邮箱不能为空'}
- {'code': 10066, 'msg': '邮箱不能为空'}
?              -

+ {'code': 1006, 'msg': '邮箱不能为空'}
2021-06-24 17:18:07,100 - [test_business_token_goodsInfo01.py -->line:48] - INFO:测试编号:1,测试用例标题:正常流程_无条件查询,执行成功!
2021-06-24 17:40:33,458 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:1,测试用例标题:正常流程_无条件查询,执行成功!
2021-06-24 17:40:33,656 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:2,测试用例标题:正常流程_所有条件组合,执行成功!
2021-06-24 17:40:33,855 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:3,测试用例标题:正常流程_部分条件组合1,执行成功!
2021-06-24 17:40:34,034 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:4,测试用例标题:正常流程_部分条件组合2,执行成功!
2021-06-24 17:40:34,132 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:5,测试用例标题:正常流程_部分条件组合3,执行成功!
2021-06-24 17:40:34,230 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:6,测试用例标题:正常流程_单个入参进行查询1,执行成功!
2021-06-24 17:40:34,341 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:7,测试用例标题:正常流程_单个入参进行查询2,执行成功!
2021-06-24 17:40:34,440 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:8,测试用例标题:正常流程_单个入参进行查询3,执行成功!
2021-06-24 17:40:34,532 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:9,测试用例标题:token为空,执行成功!
2021-06-24 17:40:34,624 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:10,测试用例标题:token过期的场景,执行成功!
2021-06-24 17:40:34,717 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:11,测试用例标题:错误token值,执行成功!
2021-06-24 17:40:34,829 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:12,测试用例标题:不存在的商品ID,执行成功!
2021-06-24 17:40:34,926 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:13,测试用例标题:商品编号非数字,执行成功!
2021-06-24 17:40:35,025 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:14,测试用例标题:销售状态非枚举,执行成功!
2021-06-24 17:40:35,123 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:15,测试用例标题:销售状态格式错误,执行成功!
2021-06-24 17:40:35,220 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:16,测试用例标题:促销状态非枚举,执行成功!
2021-06-24 17:40:35,318 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:17,测试用例标题:销售状态格式错误,执行成功!
2021-06-24 17:43:30,738 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:1,测试用例标题:正常流程_无条件查询,执行成功!
2021-06-24 17:43:30,937 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:2,测试用例标题:正常流程_所有条件组合,执行成功!
2021-06-24 17:43:31,135 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:3,测试用例标题:正常流程_部分条件组合1,执行成功!
2021-06-24 17:43:31,320 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:4,测试用例标题:正常流程_部分条件组合2,执行成功!
2021-06-24 17:43:31,420 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:5,测试用例标题:正常流程_部分条件组合3,执行成功!
2021-06-24 17:43:31,520 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:6,测试用例标题:正常流程_单个入参进行查询1,执行成功!
2021-06-24 17:43:31,624 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:7,测试用例标题:正常流程_单个入参进行查询2,执行成功!
2021-06-24 17:43:31,723 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:8,测试用例标题:正常流程_单个入参进行查询3,执行成功!
2021-06-24 17:43:31,816 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:9,测试用例标题:token为空,执行成功!
2021-06-24 17:43:31,909 - [test_business_token_goodsInfo03.py -->line:74] - ERROR:测试编号:10,测试用例标题:token过期的场景,执行失败,实际结果为:{'code': 1008, 'msg': '没有符合条件的数据'}
2021-06-24 17:43:31,912 - [test_business_token_goodsInfo03.py -->line:75] - ERROR: :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1008, 'msg': '没有符合条件的数据'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1008, 'msg': '没有符合条件的数据'}
- {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'}
+ {'code': 1008, 'msg': '没有符合条件的数据'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 71, in test_token_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1008, 'msg': '没有符合条件的数据'}
2021-06-24 17:43:32,008 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:11,测试用例标题:错误token值,执行成功!
2021-06-24 17:43:32,111 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:12,测试用例标题:不存在的商品ID,执行成功!
2021-06-24 17:43:32,210 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:13,测试用例标题:商品编号非数字,执行成功!
2021-06-24 17:43:32,308 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:14,测试用例标题:销售状态非枚举,执行成功!
2021-06-24 17:43:32,407 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:15,测试用例标题:销售状态格式错误,执行成功!
2021-06-24 17:43:32,505 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:16,测试用例标题:促销状态非枚举,执行成功!
2021-06-24 17:43:32,603 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:17,测试用例标题:销售状态格式错误,执行成功!
2021-06-24 17:44:27,489 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:1,测试用例标题:正常流程_无条件查询,执行成功!
2021-06-24 17:44:27,687 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:2,测试用例标题:正常流程_所有条件组合,执行成功!
2021-06-24 17:44:27,885 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:3,测试用例标题:正常流程_部分条件组合1,执行成功!
2021-06-24 17:44:28,061 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:4,测试用例标题:正常流程_部分条件组合2,执行成功!
2021-06-24 17:44:28,159 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:5,测试用例标题:正常流程_部分条件组合3,执行成功!
2021-06-24 17:44:28,259 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:6,测试用例标题:正常流程_单个入参进行查询1,执行成功!
2021-06-24 17:44:28,364 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:7,测试用例标题:正常流程_单个入参进行查询2,执行成功!
2021-06-24 17:44:28,463 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:8,测试用例标题:正常流程_单个入参进行查询3,执行成功!
2021-06-24 17:44:28,557 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:9,测试用例标题:token为空,执行成功!
2021-06-24 17:44:28,650 - [test_business_token_goodsInfo03.py -->line:74] - ERROR:测试编号:10,测试用例标题:token过期的场景,执行失败,实际结果为:{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': 'iphone4S', 'shopPrice': 3000.0, 'promotePrice': 0.0, 'num': 99999}]}
2021-06-24 17:44:28,650 - [test_business_token_goodsInfo03.py -->line:75] - ERROR: :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000,
 'goods_tiems': [{'goodsName': 'iphone4S',
                  'num': 99999,
                  'promotePrice': 0.0,
                  'shopPrice': 3000.0}],
 'msg': '查询成功'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[71 chars]99}]}
- {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'}
+ {'code': 1000,
+  'goods_tiems': [{'goodsName': 'iphone4S',
+                   'num': 99999,
+                   'promotePrice': 0.0,
+                   'shopPrice': 3000.0}],
+  'msg': '查询成功'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 71, in test_token_goods_info
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000,
 'goods_tiems': [{'goodsName': 'iphone4S',
                  'num': 99999,
                  'promotePrice': 0.0,
                  'shopPrice': 3000.0}],
 'msg': '查询成功'}
2021-06-24 17:44:28,745 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:11,测试用例标题:错误token值,执行成功!
2021-06-24 17:44:28,847 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:12,测试用例标题:不存在的商品ID,执行成功!
2021-06-24 17:44:28,943 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:13,测试用例标题:商品编号非数字,执行成功!
2021-06-24 17:44:29,046 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:14,测试用例标题:销售状态非枚举,执行成功!
2021-06-24 17:44:29,144 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:15,测试用例标题:销售状态格式错误,执行成功!
2021-06-24 17:44:29,243 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:16,测试用例标题:促销状态非枚举,执行成功!
2021-06-24 17:44:29,341 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:17,测试用例标题:销售状态格式错误,执行成功!
2021-06-25 15:37:16,235 - [testDemo.py -->line:64] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-25 15:37:16,455 - [testDemo.py -->line:64] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-25 15:37:16,666 - [testDemo.py -->line:64] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-25 15:37:16,825 - [testDemo.py -->line:64] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-25 15:37:16,938 - [testDemo.py -->line:64] - INFO:测试编号:5,测试用例标题:订单编号为空,执行成功!
2021-06-25 15:37:17,054 - [testDemo.py -->line:64] - INFO:测试编号:6,测试用例标题:订单编号非5位数字,执行成功!
2021-06-25 15:37:17,164 - [testDemo.py -->line:64] - INFO:测试编号:7,测试用例标题:订单编号非数字,执行成功!
2021-06-25 15:37:17,276 - [testDemo.py -->line:64] - INFO:测试编号:8,测试用例标题:订单编号不存在,执行成功!
2021-06-25 16:16:06,677 - [test_business_token_items01.py -->line:65] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-25 16:20:06,695 - [test_business_token_items02.py -->line:69] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-25 16:20:27,237 - [test_business_token_items02.py -->line:69] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-25 16:20:27,445 - [test_business_token_items02.py -->line:69] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-25 16:20:27,665 - [test_business_token_items02.py -->line:69] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-25 16:20:27,814 - [test_business_token_items02.py -->line:69] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-25 16:20:27,927 - [test_business_token_items02.py -->line:69] - INFO:测试编号:5,测试用例标题:订单编号为空,执行成功!
2021-06-25 16:20:28,046 - [test_business_token_items02.py -->line:69] - INFO:测试编号:6,测试用例标题:订单编号非5位数字,执行成功!
2021-06-25 16:20:28,156 - [test_business_token_items02.py -->line:69] - INFO:测试编号:7,测试用例标题:订单编号非数字,执行成功!
2021-06-25 16:20:28,268 - [test_business_token_items02.py -->line:69] - INFO:测试编号:8,测试用例标题:订单编号不存在,执行成功!
2021-06-26 16:13:39,385 - [test_business_goods_inputs01.py -->line:34] - ERROR:测试编号:1,测试用例标题:正常流程,执行失败,实际结果为:{'code': 9999, 'msg': 'token key值不存在'}
2021-06-26 16:13:39,385 - [test_business_goods_inputs01.py -->line:35] - ERROR: :: {'desc': 'asdfghjkla',
 'goodsName': 'iphone12',
 'goodsTypeId': '10003',
 'number': '1000',
 'shopPrice': '1999.99',
 'token': '#token#'} != {'code': 9999, 'msg': 'token key值不存在'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'token': '#token#', 'goodsName': 'iphone12[85 chars].99'} != {'code': 9999, 'msg': 'token key值不存在'}
+ {'code': 9999, 'msg': 'token key值不存在'}
- {'desc': 'asdfghjkla',
-  'goodsName': 'iphone12',
-  'goodsTypeId': '10003',
-  'number': '1000',
-  'shopPrice': '1999.99',
-  'token': '#token#'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_goods_input06\test_business_goods_inputs01.py", line 31, in test_goods_input
    self.assertEqual(eval(case.case_data), res)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'desc': 'asdfghjkla',
 'goodsName': 'iphone12',
 'goodsTypeId': '10003',
 'number': '1000',
 'shopPrice': '1999.99',
 'token': '#token#'} != {'code': 9999, 'msg': 'token key值不存在'}
2021-06-26 16:15:05,663 - [test_business_goods_inputs01.py -->line:40] - ERROR:测试编号:1,测试用例标题:正常流程,执行失败,实际结果为:{'code': 9999, 'msg': 'token key值不存在'}
2021-06-26 16:15:05,663 - [test_business_goods_inputs01.py -->line:41] - ERROR: :: {'desc': 'asdfghjkla',
 'goodsName': 'iphone12',
 'goodsTypeId': '10003',
 'number': '1000',
 'shopPrice': '1999.99',
 'token': 'MTYyNDcyNTMwNS41ODk5NzY4OjcyMDA3NmYxNGNlNTFiNzBjNjA3NThiOGIzMmExODA2YWY4Y2IyNzQ='} != {'code': 9999, 'msg': 'token key值不存在'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'token': 'MTYyNDcyNTMwNS41ODk5NzY4OjcyMDA3[158 chars].99'} != {'code': 9999, 'msg': 'token key值不存在'}
+ {'code': 9999, 'msg': 'token key值不存在'}
- {'desc': 'asdfghjkla',
-  'goodsName': 'iphone12',
-  'goodsTypeId': '10003',
-  'number': '1000',
-  'shopPrice': '1999.99',
-  'token': 'MTYyNDcyNTMwNS41ODk5NzY4OjcyMDA3NmYxNGNlNTFiNzBjNjA3NThiOGIzMmExODA2YWY4Y2IyNzQ='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_goods_input06\test_business_goods_inputs01.py", line 37, in test_goods_input
    self.assertEqual(eval(case.case_data), res)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'desc': 'asdfghjkla',
 'goodsName': 'iphone12',
 'goodsTypeId': '10003',
 'number': '1000',
 'shopPrice': '1999.99',
 'token': 'MTYyNDcyNTMwNS41ODk5NzY4OjcyMDA3NmYxNGNlNTFiNzBjNjA3NThiOGIzMmExODA2YWY4Y2IyNzQ='} != {'code': 9999, 'msg': 'token key值不存在'}
2021-06-26 16:16:46,037 - [test_business_goods_inputs01.py -->line:41] - ERROR:测试编号:1,测试用例标题:正常流程,执行失败,实际结果为:{'code': 9999, 'msg': 'token key值不存在'}
2021-06-26 16:16:46,037 - [test_business_goods_inputs01.py -->line:42] - ERROR: :: {'desc': 'asdfghjkla',
 'goodsName': 'iphone12',
 'goodsTypeId': '10003',
 'number': '1000',
 'shopPrice': '1999.99',
 'token': 'MTYyNDcyNTQwNS45NjU1MDU2OjZmY2RmYjhiNzU2MWVjZjc5YzQyNWQ2NTA1YTRjMzBmZTZiOGE2ZmE='} != {'code': 9999, 'msg': 'token key值不存在'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'token': 'MTYyNDcyNTQwNS45NjU1MDU2OjZmY2Rm[158 chars].99'} != {'code': 9999, 'msg': 'token key值不存在'}
+ {'code': 9999, 'msg': 'token key值不存在'}
- {'desc': 'asdfghjkla',
-  'goodsName': 'iphone12',
-  'goodsTypeId': '10003',
-  'number': '1000',
-  'shopPrice': '1999.99',
-  'token': 'MTYyNDcyNTQwNS45NjU1MDU2OjZmY2RmYjhiNzU2MWVjZjc5YzQyNWQ2NTA1YTRjMzBmZTZiOGE2ZmE='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_goods_input06\test_business_goods_inputs01.py", line 38, in test_goods_input
    self.assertEqual(eval(case.case_data), res)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'desc': 'asdfghjkla',
 'goodsName': 'iphone12',
 'goodsTypeId': '10003',
 'number': '1000',
 'shopPrice': '1999.99',
 'token': 'MTYyNDcyNTQwNS45NjU1MDU2OjZmY2RmYjhiNzU2MWVjZjc5YzQyNWQ2NTA1YTRjMzBmZTZiOGE2ZmE='} != {'code': 9999, 'msg': 'token key值不存在'}
2021-06-26 16:18:09,804 - [test_business_goods_inputs01.py -->line:41] - ERROR:测试编号:1,测试用例标题:正常流程,执行失败,实际结果为:{'code': 1012, 'msg': '商品分类不存在'}
2021-06-26 16:18:09,804 - [test_business_goods_inputs01.py -->line:42] - ERROR: :: {'desc': 'asdfghjkla',
 'goodsName': 'iphone12',
 'goodsTypeId': '10003',
 'number': '1000',
 'shopPrice': '1999.99',
 'token': 'MTYyNDcyNTQ4OS42MzA3NDI4OjQ0OTI4MWU3NjQyZmJjMjNmOWNjMWRhM2Y0OWE3OTkwYjllMDdkMTI='} != {'code': 1012, 'msg': '商品分类不存在'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'token': 'MTYyNDcyNTQ4OS42MzA3NDI4OjQ0OTI4[158 chars].99'} != {'code': 1012, 'msg': '商品分类不存在'}
+ {'code': 1012, 'msg': '商品分类不存在'}
- {'desc': 'asdfghjkla',
-  'goodsName': 'iphone12',
-  'goodsTypeId': '10003',
-  'number': '1000',
-  'shopPrice': '1999.99',
-  'token': 'MTYyNDcyNTQ4OS42MzA3NDI4OjQ0OTI4MWU3NjQyZmJjMjNmOWNjMWRhM2Y0OWE3OTkwYjllMDdkMTI='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_goods_input06\test_business_goods_inputs01.py", line 38, in test_goods_input
    self.assertEqual(eval(case.case_data), res)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'desc': 'asdfghjkla',
 'goodsName': 'iphone12',
 'goodsTypeId': '10003',
 'number': '1000',
 'shopPrice': '1999.99',
 'token': 'MTYyNDcyNTQ4OS42MzA3NDI4OjQ0OTI4MWU3NjQyZmJjMjNmOWNjMWRhM2Y0OWE3OTkwYjllMDdkMTI='} != {'code': 1012, 'msg': '商品分类不存在'}
2021-06-26 16:19:42,163 - [test_business_goods_inputs01.py -->line:41] - ERROR:测试编号:1,测试用例标题:正常流程,执行失败,实际结果为:{'code': 1013, 'msg': '产品名称不能重复'}
2021-06-26 16:19:42,163 - [test_business_goods_inputs01.py -->line:42] - ERROR: :: {'desc': 'asdfghjkla',
 'goodsName': 'iphone12',
 'goodsTypeId': '10003',
 'number': '1000',
 'shopPrice': '1999.99',
 'token': 'MTYyNDcyNTU4Mi4wODc1Njk6YTdiZGY5ZTM3NTQyZmRiNjE5M2VlNDgzYTIyZWFlYzM0NmY5Zjg1Ng=='} != {'code': 1013, 'msg': '产品名称不能重复'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'token': 'MTYyNDcyNTU4Mi4wODc1Njk6YTdiZGY5[158 chars].99'} != {'code': 1013, 'msg': '产品名称不能重复'}
+ {'code': 1013, 'msg': '产品名称不能重复'}
- {'desc': 'asdfghjkla',
-  'goodsName': 'iphone12',
-  'goodsTypeId': '10003',
-  'number': '1000',
-  'shopPrice': '1999.99',
-  'token': 'MTYyNDcyNTU4Mi4wODc1Njk6YTdiZGY5ZTM3NTQyZmRiNjE5M2VlNDgzYTIyZWFlYzM0NmY5Zjg1Ng=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_goods_input06\test_business_goods_inputs01.py", line 38, in test_goods_input
    self.assertEqual(eval(case.case_data), res)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'desc': 'asdfghjkla',
 'goodsName': 'iphone12',
 'goodsTypeId': '10003',
 'number': '1000',
 'shopPrice': '1999.99',
 'token': 'MTYyNDcyNTU4Mi4wODc1Njk6YTdiZGY5ZTM3NTQyZmRiNjE5M2VlNDgzYTIyZWFlYzM0NmY5Zjg1Ng=='} != {'code': 1013, 'msg': '产品名称不能重复'}
2021-06-26 16:20:02,361 - [test_business_goods_inputs01.py -->line:41] - ERROR:测试编号:1,测试用例标题:正常流程,执行失败,实际结果为:{'code': 1000, 'msg': '商品录入成功'}
2021-06-26 16:20:02,362 - [test_business_goods_inputs01.py -->line:42] - ERROR: :: {'desc': 'asdfghjkla',
 'goodsName': 'iphone13',
 'goodsTypeId': '10003',
 'number': '1000',
 'shopPrice': '1999.99',
 'token': 'MTYyNDcyNTYwMi4yODUwNTY0OjQzZjMzYjI1OWVhMWYwNGUzYWNlYjhlN2Q4YjBkNzAzMjFmNWMzZjE='} != {'code': 1000, 'msg': '商品录入成功'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'token': 'MTYyNDcyNTYwMi4yODUwNTY0OjQzZjMz[158 chars].99'} != {'code': 1000, 'msg': '商品录入成功'}
+ {'code': 1000, 'msg': '商品录入成功'}
- {'desc': 'asdfghjkla',
-  'goodsName': 'iphone13',
-  'goodsTypeId': '10003',
-  'number': '1000',
-  'shopPrice': '1999.99',
-  'token': 'MTYyNDcyNTYwMi4yODUwNTY0OjQzZjMzYjI1OWVhMWYwNGUzYWNlYjhlN2Q4YjBkNzAzMjFmNWMzZjE='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_goods_input06\test_business_goods_inputs01.py", line 38, in test_goods_input
    self.assertEqual(eval(case.case_data), res)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'desc': 'asdfghjkla',
 'goodsName': 'iphone13',
 'goodsTypeId': '10003',
 'number': '1000',
 'shopPrice': '1999.99',
 'token': 'MTYyNDcyNTYwMi4yODUwNTY0OjQzZjMzYjI1OWVhMWYwNGUzYWNlYjhlN2Q4YjBkNzAzMjFmNWMzZjE='} != {'code': 1000, 'msg': '商品录入成功'}
2021-06-26 16:20:51,080 - [test_business_goods_inputs01.py -->line:46] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-26 16:31:15,609 - [Ftest_business_goods_inputs01.py -->line:51] - ERROR:测试编号:1,测试用例标题:正常流程,执行失败,实际结果为:{'code': 1013, 'msg': '产品名称不能重复'}
2021-06-26 16:31:15,609 - [Ftest_business_goods_inputs01.py -->line:52] - ERROR: :: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1013, 'msg': '产品名称不能重复'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^          ^ ^^^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?            ^^          ^ ^^^^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_goods_input06\Ftest_business_goods_inputs01.py", line 43, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1013, 'msg': '产品名称不能重复'}
2021-06-26 16:32:09,220 - [Ftest_business_goods_inputs01.py -->line:51] - ERROR:测试编号:1,测试用例标题:正常流程,执行失败,实际结果为:{'code': 1013, 'msg': '产品名称不能重复'}
2021-06-26 16:32:09,220 - [Ftest_business_goods_inputs01.py -->line:52] - ERROR: :: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1013, 'msg': '产品名称不能重复'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^          ^ ^^^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?            ^^          ^ ^^^^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_goods_input06\Ftest_business_goods_inputs01.py", line 43, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1013, 'msg': '产品名称不能重复'}
2021-06-26 16:32:30,000 - [Ftest_business_goods_inputs01.py -->line:51] - ERROR:测试编号:1,测试用例标题:正常流程,执行失败,实际结果为:{'code': 1013, 'msg': '产品名称不能重复'}
2021-06-26 16:32:30,001 - [Ftest_business_goods_inputs01.py -->line:52] - ERROR: :: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1013, 'msg': '产品名称不能重复'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^          ^ ^^^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?            ^^          ^ ^^^^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_goods_input06\Ftest_business_goods_inputs01.py", line 43, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1013, 'msg': '产品名称不能重复'}
2021-06-26 16:33:31,893 - [Ftest_business_goods_inputs01.py -->line:56] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-26 16:33:47,188 - [Ftest_business_goods_inputs01.py -->line:56] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-26 16:42:21,747 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-26 16:42:21,828 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-26 16:42:21,905 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-26 16:42:21,983 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-26 16:42:22,071 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:5,测试用例标题:商品名为空,执行成功!
2021-06-26 16:42:22,153 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:6,测试用例标题:商品名已存在,执行成功!
2021-06-26 16:42:22,239 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:7,测试用例标题:商品名的有效边界值,执行成功!
2021-06-26 16:42:22,361 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:8,测试用例标题:商品名无效边界值,执行成功!
2021-06-26 16:42:22,442 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:9,测试用例标题:商品分类ID为空,执行成功!
2021-06-26 16:42:22,525 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:10,测试用例标题:商品分类ID不存在,执行成功!
2021-06-26 16:42:22,607 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:11,测试用例标题:商品分类ID非数字,执行成功!
2021-06-26 16:42:22,690 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:12,测试用例标题:ID非5位数字,执行成功!
2021-06-26 16:42:22,780 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:13,测试用例标题:商品描述为空,执行成功!
2021-06-26 16:42:22,881 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:14,测试用例标题:商品描述有效边界值,执行成功!
2021-06-26 16:42:22,963 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:15,测试用例标题:商品描述无效边界值,执行成功!
2021-06-26 16:42:23,046 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:16,测试用例标题:商品库存为空,执行成功!
2021-06-26 16:42:23,144 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:17,测试用例标题:商品库存有效边界,执行成功!
2021-06-26 16:42:23,226 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:18,测试用例标题:商品库存无效边界值,执行成功!
2021-06-26 16:42:23,309 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:19,测试用例标题:商品库存非整数,执行成功!
2021-06-26 16:42:23,419 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:20,测试用例标题:商品库存为负数,执行成功!
2021-06-26 16:42:23,501 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:21,测试用例标题:商品价格为空,执行成功!
2021-06-26 16:42:23,584 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:22,测试用例标题:商品价格非数字,执行成功!
2021-06-26 16:42:23,672 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:23,测试用例标题:商品价格有效边界,执行成功!
2021-06-26 16:42:23,756 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:24,测试用例标题:商品价格无效边界,执行成功!
2021-06-26 16:42:23,839 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:25,测试用例标题:商品价格非两位小数,执行成功!
2021-06-26 16:42:23,922 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:26,测试用例标题:商品价格为负数,执行成功!
2021-06-26 16:43:28,843 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-26 16:43:28,920 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-26 16:43:28,997 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-26 16:43:29,095 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-26 16:43:29,185 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:5,测试用例标题:商品名为空,执行成功!
2021-06-26 16:43:29,271 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:6,测试用例标题:商品名已存在,执行成功!
2021-06-26 16:43:29,370 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:7,测试用例标题:商品名的有效边界值,执行成功!
2021-06-26 16:43:29,456 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:8,测试用例标题:商品名无效边界值,执行成功!
2021-06-26 16:43:29,547 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:9,测试用例标题:商品分类ID为空,执行成功!
2021-06-26 16:43:29,630 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:10,测试用例标题:商品分类ID不存在,执行成功!
2021-06-26 16:43:29,716 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:11,测试用例标题:商品分类ID非数字,执行成功!
2021-06-26 16:43:29,801 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:12,测试用例标题:ID非5位数字,执行成功!
2021-06-26 16:43:29,898 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:13,测试用例标题:商品描述为空,执行成功!
2021-06-26 16:43:29,997 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:14,测试用例标题:商品描述有效边界值,执行成功!
2021-06-26 16:43:30,084 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:15,测试用例标题:商品描述无效边界值,执行成功!
2021-06-26 16:43:30,168 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:16,测试用例标题:商品库存为空,执行成功!
2021-06-26 16:43:30,269 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:17,测试用例标题:商品库存有效边界,执行成功!
2021-06-26 16:43:30,350 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:18,测试用例标题:商品库存无效边界值,执行成功!
2021-06-26 16:43:30,432 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:19,测试用例标题:商品库存非整数,执行成功!
2021-06-26 16:43:30,529 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:20,测试用例标题:商品库存为负数,执行成功!
2021-06-26 16:43:30,611 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:21,测试用例标题:商品价格为空,执行成功!
2021-06-26 16:43:30,692 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:22,测试用例标题:商品价格非数字,执行成功!
2021-06-26 16:43:30,787 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:23,测试用例标题:商品价格有效边界,执行成功!
2021-06-26 16:43:30,868 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:24,测试用例标题:商品价格无效边界,执行成功!
2021-06-26 16:43:30,949 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:25,测试用例标题:商品价格非两位小数,执行成功!
2021-06-26 16:43:31,031 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:26,测试用例标题:商品价格为负数,执行成功!
2021-06-26 16:43:33,988 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-26 16:43:34,069 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-26 16:43:34,148 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-26 16:43:34,224 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-26 16:43:34,311 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:5,测试用例标题:商品名为空,执行成功!
2021-06-26 16:43:34,393 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:6,测试用例标题:商品名已存在,执行成功!
2021-06-26 16:43:34,490 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:7,测试用例标题:商品名的有效边界值,执行成功!
2021-06-26 16:43:34,570 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:8,测试用例标题:商品名无效边界值,执行成功!
2021-06-26 16:43:34,651 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:9,测试用例标题:商品分类ID为空,执行成功!
2021-06-26 16:43:34,733 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:10,测试用例标题:商品分类ID不存在,执行成功!
2021-06-26 16:43:34,815 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:11,测试用例标题:商品分类ID非数字,执行成功!
2021-06-26 16:43:34,895 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:12,测试用例标题:ID非5位数字,执行成功!
2021-06-26 16:43:35,006 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:13,测试用例标题:商品描述为空,执行成功!
2021-06-26 16:43:35,104 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:14,测试用例标题:商品描述有效边界值,执行成功!
2021-06-26 16:43:35,187 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:15,测试用例标题:商品描述无效边界值,执行成功!
2021-06-26 16:43:35,276 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:16,测试用例标题:商品库存为空,执行成功!
2021-06-26 16:43:35,382 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:17,测试用例标题:商品库存有效边界,执行成功!
2021-06-26 16:43:35,464 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:18,测试用例标题:商品库存无效边界值,执行成功!
2021-06-26 16:43:35,545 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:19,测试用例标题:商品库存非整数,执行成功!
2021-06-26 16:43:35,640 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:20,测试用例标题:商品库存为负数,执行成功!
2021-06-26 16:43:35,719 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:21,测试用例标题:商品价格为空,执行成功!
2021-06-26 16:43:35,801 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:22,测试用例标题:商品价格非数字,执行成功!
2021-06-26 16:43:35,919 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:23,测试用例标题:商品价格有效边界,执行成功!
2021-06-26 16:43:36,022 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:24,测试用例标题:商品价格无效边界,执行成功!
2021-06-26 16:43:36,104 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:25,测试用例标题:商品价格非两位小数,执行成功!
2021-06-26 16:43:36,185 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:26,测试用例标题:商品价格为负数,执行成功!
2021-06-26 16:43:38,749 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-26 16:43:38,827 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-26 16:43:38,903 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-26 16:43:38,979 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-26 16:43:39,066 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:5,测试用例标题:商品名为空,执行成功!
2021-06-26 16:43:39,150 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:6,测试用例标题:商品名已存在,执行成功!
2021-06-26 16:43:39,267 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:7,测试用例标题:商品名的有效边界值,执行成功!
2021-06-26 16:43:39,348 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:8,测试用例标题:商品名无效边界值,执行成功!
2021-06-26 16:43:39,428 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:9,测试用例标题:商品分类ID为空,执行成功!
2021-06-26 16:43:39,528 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:10,测试用例标题:商品分类ID不存在,执行成功!
2021-06-26 16:43:39,608 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:11,测试用例标题:商品分类ID非数字,执行成功!
2021-06-26 16:43:39,690 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:12,测试用例标题:ID非5位数字,执行成功!
2021-06-26 16:43:39,812 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:13,测试用例标题:商品描述为空,执行成功!
2021-06-26 16:43:39,909 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:14,测试用例标题:商品描述有效边界值,执行成功!
2021-06-26 16:43:39,990 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:15,测试用例标题:商品描述无效边界值,执行成功!
2021-06-26 16:43:40,073 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:16,测试用例标题:商品库存为空,执行成功!
2021-06-26 16:43:40,206 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:17,测试用例标题:商品库存有效边界,执行成功!
2021-06-26 16:43:40,287 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:18,测试用例标题:商品库存无效边界值,执行成功!
2021-06-26 16:43:40,369 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:19,测试用例标题:商品库存非整数,执行成功!
2021-06-26 16:43:40,465 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:20,测试用例标题:商品库存为负数,执行成功!
2021-06-26 16:43:40,548 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:21,测试用例标题:商品价格为空,执行成功!
2021-06-26 16:43:40,632 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:22,测试用例标题:商品价格非数字,执行成功!
2021-06-26 16:43:40,724 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:23,测试用例标题:商品价格有效边界,执行成功!
2021-06-26 16:43:40,807 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:24,测试用例标题:商品价格无效边界,执行成功!
2021-06-26 16:43:40,892 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:25,测试用例标题:商品价格非两位小数,执行成功!
2021-06-26 16:43:40,971 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:26,测试用例标题:商品价格为负数,执行成功!
2021-06-26 16:43:46,560 - [test_business_regist04.py -->line:64] - INFO:测试编号:1,测试用例标题:注册成功,执行成功!
2021-06-26 16:43:46,635 - [test_business_regist04.py -->line:64] - INFO:测试编号:2,测试用例标题:用户名为空,执行成功!
2021-06-26 16:43:46,728 - [test_business_regist04.py -->line:64] - INFO:测试编号:3,测试用例标题:用户名有效边界值,执行成功!
2021-06-26 16:43:46,809 - [test_business_regist04.py -->line:64] - INFO:测试编号:4,测试用例标题:用户名无效边界值,执行成功!
2021-06-26 16:43:46,886 - [test_business_regist04.py -->line:64] - INFO:测试编号:5,测试用例标题:用户名非字母开头,执行成功!
2021-06-26 16:43:46,961 - [test_business_regist04.py -->line:64] - INFO:测试编号:6,测试用例标题:用户名包含符号,执行成功!
2021-06-26 16:43:47,037 - [test_business_regist04.py -->line:64] - INFO:测试编号:7,测试用例标题:用户名包含汉字,执行成功!
2021-06-26 16:43:47,126 - [test_business_regist04.py -->line:64] - INFO:测试编号:8,测试用例标题:用户名已注册,执行成功!
2021-06-26 16:43:47,206 - [test_business_regist04.py -->line:64] - INFO:测试编号:9,测试用例标题:密码为空,执行成功!
2021-06-26 16:43:47,301 - [test_business_regist04.py -->line:64] - INFO:测试编号:10,测试用例标题:密码有效边界值,执行成功!
2021-06-26 16:43:47,380 - [test_business_regist04.py -->line:64] - INFO:测试编号:11,测试用例标题:密码无效边界值,执行成功!
2021-06-26 16:43:47,457 - [test_business_regist04.py -->line:64] - INFO:测试编号:12,测试用例标题:确认密码和密码不一致,执行成功!
2021-06-26 16:43:47,536 - [test_business_regist04.py -->line:64] - INFO:测试编号:13,测试用例标题:确认密码为空,执行成功!
2021-06-26 16:43:47,614 - [test_business_regist04.py -->line:64] - INFO:测试编号:14,测试用例标题:确认密码区分大小写,执行成功!
2021-06-26 16:43:47,692 - [test_business_regist04.py -->line:64] - INFO:测试编号:15,测试用例标题:正确密码+其他,执行成功!
2021-06-26 16:43:47,786 - [test_business_regist04.py -->line:64] - INFO:测试编号:16,测试用例标题:手机号码为空,执行成功!
2021-06-26 16:43:47,867 - [test_business_regist04.py -->line:59] - ERROR:测试编号:17,测试用例标题:手机号码不支持号段,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-26 16:43:47,867 - [test_business_regist04.py -->line:60] - ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_regist03\test_business_regist04.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res)  # 判定响应结果
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-26 16:43:47,944 - [test_business_regist04.py -->line:64] - INFO:测试编号:18,测试用例标题:手机号码非11位数字,执行成功!
2021-06-26 16:43:48,020 - [test_business_regist04.py -->line:64] - INFO:测试编号:19,测试用例标题:手机号码非数字,执行成功!
2021-06-26 16:43:48,103 - [test_business_regist04.py -->line:64] - INFO:测试编号:20,测试用例标题:手机号已注册,执行成功!
2021-06-26 16:43:48,195 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:1,测试用例标题:正常流程_无条件查询,执行成功!
2021-06-26 16:43:48,278 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:2,测试用例标题:正常流程_所有条件组合,执行成功!
2021-06-26 16:43:48,360 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:3,测试用例标题:正常流程_部分条件组合1,执行成功!
2021-06-26 16:43:48,443 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:4,测试用例标题:正常流程_部分条件组合2,执行成功!
2021-06-26 16:43:48,527 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:5,测试用例标题:正常流程_部分条件组合3,执行成功!
2021-06-26 16:43:48,609 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:6,测试用例标题:正常流程_单个入参进行查询1,执行成功!
2021-06-26 16:43:48,692 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:7,测试用例标题:正常流程_单个入参进行查询2,执行成功!
2021-06-26 16:43:48,774 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:8,测试用例标题:正常流程_单个入参进行查询3,执行成功!
2021-06-26 16:43:48,852 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:9,测试用例标题:token为空,执行成功!
2021-06-26 16:43:48,928 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:10,测试用例标题:token过期的场景,执行成功!
2021-06-26 16:43:49,020 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:11,测试用例标题:错误token值,执行成功!
2021-06-26 16:43:49,102 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:12,测试用例标题:不存在的商品ID,执行成功!
2021-06-26 16:43:49,183 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:13,测试用例标题:商品编号非数字,执行成功!
2021-06-26 16:43:49,264 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:14,测试用例标题:销售状态非枚举,执行成功!
2021-06-26 16:43:49,349 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:15,测试用例标题:销售状态格式错误,执行成功!
2021-06-26 16:43:49,431 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:16,测试用例标题:促销状态非枚举,执行成功!
2021-06-26 16:43:49,513 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:17,测试用例标题:销售状态格式错误,执行成功!
2021-06-26 16:43:49,613 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-26 16:43:49,688 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-26 16:43:49,767 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-26 16:43:49,851 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-26 16:43:49,936 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:5,测试用例标题:商品名为空,执行成功!
2021-06-26 16:43:50,020 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:6,测试用例标题:商品名已存在,执行成功!
2021-06-26 16:43:50,125 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:7,测试用例标题:商品名的有效边界值,执行成功!
2021-06-26 16:43:50,207 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:8,测试用例标题:商品名无效边界值,执行成功!
2021-06-26 16:43:50,306 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:9,测试用例标题:商品分类ID为空,执行成功!
2021-06-26 16:43:50,402 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:10,测试用例标题:商品分类ID不存在,执行成功!
2021-06-26 16:43:50,485 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:11,测试用例标题:商品分类ID非数字,执行成功!
2021-06-26 16:43:50,574 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:12,测试用例标题:ID非5位数字,执行成功!
2021-06-26 16:43:50,672 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:13,测试用例标题:商品描述为空,执行成功!
2021-06-26 16:43:50,771 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:14,测试用例标题:商品描述有效边界值,执行成功!
2021-06-26 16:43:50,853 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:15,测试用例标题:商品描述无效边界值,执行成功!
2021-06-26 16:43:50,935 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:16,测试用例标题:商品库存为空,执行成功!
2021-06-26 16:43:51,034 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:17,测试用例标题:商品库存有效边界,执行成功!
2021-06-26 16:43:51,119 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:18,测试用例标题:商品库存无效边界值,执行成功!
2021-06-26 16:43:51,201 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:19,测试用例标题:商品库存非整数,执行成功!
2021-06-26 16:43:51,279 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:20,测试用例标题:商品库存为负数,执行成功!
2021-06-26 16:43:51,360 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:21,测试用例标题:商品价格为空,执行成功!
2021-06-26 16:43:51,445 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:22,测试用例标题:商品价格非数字,执行成功!
2021-06-26 16:43:51,542 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:23,测试用例标题:商品价格有效边界,执行成功!
2021-06-26 16:43:51,645 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:24,测试用例标题:商品价格无效边界,执行成功!
2021-06-26 16:43:51,740 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:25,测试用例标题:商品价格非两位小数,执行成功!
2021-06-26 16:43:51,824 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:26,测试用例标题:商品价格为负数,执行成功!
2021-06-26 16:43:51,916 - [test_Login04.py -->line:68] - INFO:测试编号:1,测试用例标题:登录成功,执行成功！
2021-06-26 16:43:51,993 - [test_Login04.py -->line:68] - INFO:测试编号:2,测试用例标题:用户名为空,执行成功！
2021-06-26 16:43:52,072 - [test_Login04.py -->line:68] - INFO:测试编号:3,测试用例标题:错误的用户名,执行成功！
2021-06-26 16:43:52,148 - [test_Login04.py -->line:68] - INFO:测试编号:4,测试用例标题:大小写区分,执行成功！
2021-06-26 16:43:52,226 - [test_Login04.py -->line:68] - INFO:测试编号:5,测试用例标题:密码为空,执行成功！
2021-06-26 16:43:52,304 - [test_Login04.py -->line:68] - INFO:测试编号:6,测试用例标题:密码错误,执行成功！
2021-06-26 16:43:52,383 - [test_Login04.py -->line:68] - INFO:测试编号:7,测试用例标题:大小写区分,执行成功！
2021-06-26 16:43:52,461 - [test_Login04.py -->line:68] - INFO:测试编号:8,测试用例标题:用户类型为空,执行成功！
2021-06-26 16:43:52,538 - [test_Login04.py -->line:68] - INFO:测试编号:9,测试用例标题:用户类型非枚举,执行成功！
2021-06-26 16:43:52,616 - [test_Login04.py -->line:68] - INFO:测试编号:10,测试用例标题:非普通用户,执行成功！
2021-06-26 16:43:52,693 - [test_Login04.py -->line:68] - INFO:测试编号:11,测试用例标题:格式错误,执行成功！
2021-06-26 16:43:52,781 - [test_business_token_items02.py -->line:69] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-26 16:43:52,856 - [test_business_token_items02.py -->line:69] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-26 16:43:52,950 - [test_business_token_items02.py -->line:69] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-26 16:43:53,029 - [test_business_token_items02.py -->line:69] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-26 16:43:53,112 - [test_business_token_items02.py -->line:69] - INFO:测试编号:5,测试用例标题:订单编号为空,执行成功!
2021-06-26 16:43:53,198 - [test_business_token_items02.py -->line:69] - INFO:测试编号:6,测试用例标题:订单编号非5位数字,执行成功!
2021-06-26 16:43:53,283 - [test_business_token_items02.py -->line:69] - INFO:测试编号:7,测试用例标题:订单编号非数字,执行成功!
2021-06-26 16:43:53,367 - [test_business_token_items02.py -->line:69] - INFO:测试编号:8,测试用例标题:订单编号不存在,执行成功!
2021-06-26 16:44:39,692 - [test_business_regist04.py -->line:64] - INFO:测试编号:1,测试用例标题:注册成功,执行成功!
2021-06-26 16:44:39,767 - [test_business_regist04.py -->line:64] - INFO:测试编号:2,测试用例标题:用户名为空,执行成功!
2021-06-26 16:44:39,859 - [test_business_regist04.py -->line:64] - INFO:测试编号:3,测试用例标题:用户名有效边界值,执行成功!
2021-06-26 16:44:39,933 - [test_business_regist04.py -->line:64] - INFO:测试编号:4,测试用例标题:用户名无效边界值,执行成功!
2021-06-26 16:44:40,009 - [test_business_regist04.py -->line:64] - INFO:测试编号:5,测试用例标题:用户名非字母开头,执行成功!
2021-06-26 16:44:40,085 - [test_business_regist04.py -->line:64] - INFO:测试编号:6,测试用例标题:用户名包含符号,执行成功!
2021-06-26 16:44:40,160 - [test_business_regist04.py -->line:64] - INFO:测试编号:7,测试用例标题:用户名包含汉字,执行成功!
2021-06-26 16:44:40,244 - [test_business_regist04.py -->line:64] - INFO:测试编号:8,测试用例标题:用户名已注册,执行成功!
2021-06-26 16:44:40,321 - [test_business_regist04.py -->line:64] - INFO:测试编号:9,测试用例标题:密码为空,执行成功!
2021-06-26 16:44:40,415 - [test_business_regist04.py -->line:64] - INFO:测试编号:10,测试用例标题:密码有效边界值,执行成功!
2021-06-26 16:44:40,495 - [test_business_regist04.py -->line:64] - INFO:测试编号:11,测试用例标题:密码无效边界值,执行成功!
2021-06-26 16:44:40,570 - [test_business_regist04.py -->line:64] - INFO:测试编号:12,测试用例标题:确认密码和密码不一致,执行成功!
2021-06-26 16:44:40,644 - [test_business_regist04.py -->line:64] - INFO:测试编号:13,测试用例标题:确认密码为空,执行成功!
2021-06-26 16:44:40,728 - [test_business_regist04.py -->line:64] - INFO:测试编号:14,测试用例标题:确认密码区分大小写,执行成功!
2021-06-26 16:44:40,804 - [test_business_regist04.py -->line:64] - INFO:测试编号:15,测试用例标题:正确密码+其他,执行成功!
2021-06-26 16:44:40,891 - [test_business_regist04.py -->line:64] - INFO:测试编号:16,测试用例标题:手机号码为空,执行成功!
2021-06-26 16:44:40,969 - [test_business_regist04.py -->line:59] - ERROR:测试编号:17,测试用例标题:手机号码不支持号段,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-26 16:44:40,969 - [test_business_regist04.py -->line:60] - ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_regist03\test_business_regist04.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res)  # 判定响应结果
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-26 16:44:41,044 - [test_business_regist04.py -->line:64] - INFO:测试编号:18,测试用例标题:手机号码非11位数字,执行成功!
2021-06-26 16:44:41,119 - [test_business_regist04.py -->line:64] - INFO:测试编号:19,测试用例标题:手机号码非数字,执行成功!
2021-06-26 16:44:41,205 - [test_business_regist04.py -->line:64] - INFO:测试编号:20,测试用例标题:手机号已注册,执行成功!
2021-06-26 16:44:41,298 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:1,测试用例标题:正常流程_无条件查询,执行成功!
2021-06-26 16:44:41,382 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:2,测试用例标题:正常流程_所有条件组合,执行成功!
2021-06-26 16:44:41,466 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:3,测试用例标题:正常流程_部分条件组合1,执行成功!
2021-06-26 16:44:41,548 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:4,测试用例标题:正常流程_部分条件组合2,执行成功!
2021-06-26 16:44:41,642 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:5,测试用例标题:正常流程_部分条件组合3,执行成功!
2021-06-26 16:44:41,734 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:6,测试用例标题:正常流程_单个入参进行查询1,执行成功!
2021-06-26 16:44:41,824 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:7,测试用例标题:正常流程_单个入参进行查询2,执行成功!
2021-06-26 16:44:41,907 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:8,测试用例标题:正常流程_单个入参进行查询3,执行成功!
2021-06-26 16:44:41,988 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:9,测试用例标题:token为空,执行成功!
2021-06-26 16:44:42,066 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:10,测试用例标题:token过期的场景,执行成功!
2021-06-26 16:44:42,157 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:11,测试用例标题:错误token值,执行成功!
2021-06-26 16:44:42,238 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:12,测试用例标题:不存在的商品ID,执行成功!
2021-06-26 16:44:42,321 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:13,测试用例标题:商品编号非数字,执行成功!
2021-06-26 16:44:42,402 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:14,测试用例标题:销售状态非枚举,执行成功!
2021-06-26 16:44:42,489 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:15,测试用例标题:销售状态格式错误,执行成功!
2021-06-26 16:44:42,571 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:16,测试用例标题:促销状态非枚举,执行成功!
2021-06-26 16:44:42,653 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:17,测试用例标题:销售状态格式错误,执行成功!
2021-06-26 16:44:42,758 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-26 16:44:42,834 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-26 16:44:42,915 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-26 16:44:42,991 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-26 16:44:43,073 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:5,测试用例标题:商品名为空,执行成功!
2021-06-26 16:44:43,153 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:6,测试用例标题:商品名已存在,执行成功!
2021-06-26 16:44:43,248 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:7,测试用例标题:商品名的有效边界值,执行成功!
2021-06-26 16:44:43,328 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:8,测试用例标题:商品名无效边界值,执行成功!
2021-06-26 16:44:43,407 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:9,测试用例标题:商品分类ID为空,执行成功!
2021-06-26 16:44:43,502 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:10,测试用例标题:商品分类ID不存在,执行成功!
2021-06-26 16:44:43,582 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:11,测试用例标题:商品分类ID非数字,执行成功!
2021-06-26 16:44:43,662 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:12,测试用例标题:ID非5位数字,执行成功!
2021-06-26 16:44:43,753 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:13,测试用例标题:商品描述为空,执行成功!
2021-06-26 16:44:43,851 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:14,测试用例标题:商品描述有效边界值,执行成功!
2021-06-26 16:44:43,934 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:15,测试用例标题:商品描述无效边界值,执行成功!
2021-06-26 16:44:44,015 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:16,测试用例标题:商品库存为空,执行成功!
2021-06-26 16:44:44,148 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:17,测试用例标题:商品库存有效边界,执行成功!
2021-06-26 16:44:44,231 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:18,测试用例标题:商品库存无效边界值,执行成功!
2021-06-26 16:44:44,313 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:19,测试用例标题:商品库存非整数,执行成功!
2021-06-26 16:44:44,397 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:20,测试用例标题:商品库存为负数,执行成功!
2021-06-26 16:44:44,485 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:21,测试用例标题:商品价格为空,执行成功!
2021-06-26 16:44:44,569 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:22,测试用例标题:商品价格非数字,执行成功!
2021-06-26 16:44:44,667 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:23,测试用例标题:商品价格有效边界,执行成功!
2021-06-26 16:44:44,748 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:24,测试用例标题:商品价格无效边界,执行成功!
2021-06-26 16:44:44,852 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:25,测试用例标题:商品价格非两位小数,执行成功!
2021-06-26 16:44:44,933 - [test_business_goods_inputs03.py -->line:58] - INFO:测试编号:26,测试用例标题:商品价格为负数,执行成功!
2021-06-26 16:44:45,017 - [test_Login04.py -->line:68] - INFO:测试编号:1,测试用例标题:登录成功,执行成功！
2021-06-26 16:44:45,095 - [test_Login04.py -->line:68] - INFO:测试编号:2,测试用例标题:用户名为空,执行成功！
2021-06-26 16:44:45,173 - [test_Login04.py -->line:68] - INFO:测试编号:3,测试用例标题:错误的用户名,执行成功！
2021-06-26 16:44:45,250 - [test_Login04.py -->line:68] - INFO:测试编号:4,测试用例标题:大小写区分,执行成功！
2021-06-26 16:44:45,330 - [test_Login04.py -->line:68] - INFO:测试编号:5,测试用例标题:密码为空,执行成功！
2021-06-26 16:44:45,407 - [test_Login04.py -->line:68] - INFO:测试编号:6,测试用例标题:密码错误,执行成功！
2021-06-26 16:44:45,484 - [test_Login04.py -->line:68] - INFO:测试编号:7,测试用例标题:大小写区分,执行成功！
2021-06-26 16:44:45,562 - [test_Login04.py -->line:68] - INFO:测试编号:8,测试用例标题:用户类型为空,执行成功！
2021-06-26 16:44:45,640 - [test_Login04.py -->line:68] - INFO:测试编号:9,测试用例标题:用户类型非枚举,执行成功！
2021-06-26 16:44:45,718 - [test_Login04.py -->line:68] - INFO:测试编号:10,测试用例标题:非普通用户,执行成功！
2021-06-26 16:44:45,797 - [test_Login04.py -->line:68] - INFO:测试编号:11,测试用例标题:格式错误,执行成功！
2021-06-26 16:44:45,883 - [test_business_token_items02.py -->line:69] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-26 16:44:45,960 - [test_business_token_items02.py -->line:69] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-26 16:44:46,040 - [test_business_token_items02.py -->line:69] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-26 16:44:46,139 - [test_business_token_items02.py -->line:69] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-26 16:44:46,225 - [test_business_token_items02.py -->line:69] - INFO:测试编号:5,测试用例标题:订单编号为空,执行成功!
2021-06-26 16:44:46,309 - [test_business_token_items02.py -->line:69] - INFO:测试编号:6,测试用例标题:订单编号非5位数字,执行成功!
2021-06-26 16:44:46,390 - [test_business_token_items02.py -->line:69] - INFO:测试编号:7,测试用例标题:订单编号非数字,执行成功!
2021-06-26 16:44:46,477 - [test_business_token_items02.py -->line:69] - INFO:测试编号:8,测试用例标题:订单编号不存在,执行成功!
2021-06-26 16:49:17,931 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-26 16:49:18,008 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-26 16:49:18,086 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-26 16:49:18,164 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-26 16:49:18,251 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:5,测试用例标题:商品名为空,执行成功!
2021-06-26 16:49:18,423 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:7,测试用例标题:商品名的有效边界值,执行成功!
2021-06-26 16:49:18,506 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:8,测试用例标题:商品名无效边界值,执行成功!
2021-06-26 16:49:18,585 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:9,测试用例标题:商品分类ID为空,执行成功!
2021-06-26 16:49:18,666 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:10,测试用例标题:商品分类ID不存在,执行成功!
2021-06-26 16:49:18,749 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:11,测试用例标题:商品分类ID非数字,执行成功!
2021-06-26 16:49:18,832 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:12,测试用例标题:ID非5位数字,执行成功!
2021-06-26 16:49:18,930 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:13,测试用例标题:商品描述为空,执行成功!
2021-06-26 16:49:19,031 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:14,测试用例标题:商品描述有效边界值,执行成功!
2021-06-26 16:49:19,113 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:15,测试用例标题:商品描述无效边界值,执行成功!
2021-06-26 16:49:19,196 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:16,测试用例标题:商品库存为空,执行成功!
2021-06-26 16:49:19,296 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:17,测试用例标题:商品库存有效边界,执行成功!
2021-06-26 16:49:19,376 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:18,测试用例标题:商品库存无效边界值,执行成功!
2021-06-26 16:49:19,457 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:19,测试用例标题:商品库存非整数,执行成功!
2021-06-26 16:49:19,539 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:20,测试用例标题:商品库存为负数,执行成功!
2021-06-26 16:49:19,635 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:21,测试用例标题:商品价格为空,执行成功!
2021-06-26 16:49:19,715 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:22,测试用例标题:商品价格非数字,执行成功!
2021-06-26 16:49:19,831 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:23,测试用例标题:商品价格有效边界,执行成功!
2021-06-26 16:49:19,912 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:24,测试用例标题:商品价格无效边界,执行成功!
2021-06-26 16:49:20,018 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:25,测试用例标题:商品价格非两位小数,执行成功!
2021-06-26 16:49:20,102 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:26,测试用例标题:商品价格为负数,执行成功!
2021-06-26 16:49:46,155 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-26 16:49:46,238 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-26 16:49:46,313 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-26 16:49:46,389 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-26 16:49:46,477 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:5,测试用例标题:商品名为空,执行成功!
2021-06-26 16:49:46,570 - [test_business_goods_inputs03.py -->line:58] - ERROR:测试编号:6,测试用例标题:商品名已存在,执行失败,实际结果为:{'code': 1000, 'msg': '商品录入成功'}
2021-06-26 16:49:46,570 - [test_business_goods_inputs03.py -->line:59] - ERROR: :: {'code': 1013, 'msg': '产品名称不能重复'} != {'code': 1000, 'msg': '商品录入成功'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '产品名称不能重复'} != {'code': 1000, 'msg': '商品录入成功'}
- {'code': 1013, 'msg': '产品名称不能重复'}
?            ^^          ^ ^^^^^^

+ {'code': 1000, 'msg': '商品录入成功'}
?            ^^          ^ ^^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_goods_input06\test_business_goods_inputs03.py", line 49, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1013, 'msg': '产品名称不能重复'} != {'code': 1000, 'msg': '商品录入成功'}
2021-06-26 16:49:46,672 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:7,测试用例标题:商品名的有效边界值,执行成功!
2021-06-26 16:49:46,754 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:8,测试用例标题:商品名无效边界值,执行成功!
2021-06-26 16:49:46,835 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:9,测试用例标题:商品分类ID为空,执行成功!
2021-06-26 16:49:46,918 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:10,测试用例标题:商品分类ID不存在,执行成功!
2021-06-26 16:49:47,007 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:11,测试用例标题:商品分类ID非数字,执行成功!
2021-06-26 16:49:47,089 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:12,测试用例标题:ID非5位数字,执行成功!
2021-06-26 16:49:47,186 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:13,测试用例标题:商品描述为空,执行成功!
2021-06-26 16:49:47,287 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:14,测试用例标题:商品描述有效边界值,执行成功!
2021-06-26 16:49:47,368 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:15,测试用例标题:商品描述无效边界值,执行成功!
2021-06-26 16:49:47,451 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:16,测试用例标题:商品库存为空,执行成功!
2021-06-26 16:49:47,550 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:17,测试用例标题:商品库存有效边界,执行成功!
2021-06-26 16:49:47,635 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:18,测试用例标题:商品库存无效边界值,执行成功!
2021-06-26 16:49:47,717 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:19,测试用例标题:商品库存非整数,执行成功!
2021-06-26 16:49:47,817 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:20,测试用例标题:商品库存为负数,执行成功!
2021-06-26 16:49:47,902 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:21,测试用例标题:商品价格为空,执行成功!
2021-06-26 16:49:47,981 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:22,测试用例标题:商品价格非数字,执行成功!
2021-06-26 16:49:48,079 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:23,测试用例标题:商品价格有效边界,执行成功!
2021-06-26 16:49:48,160 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:24,测试用例标题:商品价格无效边界,执行成功!
2021-06-26 16:49:48,240 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:25,测试用例标题:商品价格非两位小数,执行成功!
2021-06-26 16:49:48,323 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:26,测试用例标题:商品价格为负数,执行成功!
2021-06-26 16:50:54,505 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-26 16:50:54,582 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-26 16:50:54,658 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-26 16:50:54,735 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-26 16:50:54,824 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:5,测试用例标题:商品名为空,执行成功!
2021-06-26 16:50:54,919 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:6,测试用例标题:商品名已存在,执行成功!
2021-06-26 16:50:55,065 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:7,测试用例标题:商品名的有效边界值,执行成功!
2021-06-26 16:50:55,147 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:8,测试用例标题:商品名无效边界值,执行成功!
2021-06-26 16:50:55,228 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:9,测试用例标题:商品分类ID为空,执行成功!
2021-06-26 16:50:55,310 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:10,测试用例标题:商品分类ID不存在,执行成功!
2021-06-26 16:50:55,393 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:11,测试用例标题:商品分类ID非数字,执行成功!
2021-06-26 16:50:55,476 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:12,测试用例标题:ID非5位数字,执行成功!
2021-06-26 16:50:55,571 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:13,测试用例标题:商品描述为空,执行成功!
2021-06-26 16:50:55,669 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:14,测试用例标题:商品描述有效边界值,执行成功!
2021-06-26 16:50:55,751 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:15,测试用例标题:商品描述无效边界值,执行成功!
2021-06-26 16:50:55,833 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:16,测试用例标题:商品库存为空,执行成功!
2021-06-26 16:50:55,935 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:17,测试用例标题:商品库存有效边界,执行成功!
2021-06-26 16:50:56,023 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:18,测试用例标题:商品库存无效边界值,执行成功!
2021-06-26 16:50:56,106 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:19,测试用例标题:商品库存非整数,执行成功!
2021-06-26 16:50:56,204 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:20,测试用例标题:商品库存为负数,执行成功!
2021-06-26 16:50:56,292 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:21,测试用例标题:商品价格为空,执行成功!
2021-06-26 16:50:56,376 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:22,测试用例标题:商品价格非数字,执行成功!
2021-06-26 16:50:56,494 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:23,测试用例标题:商品价格有效边界,执行成功!
2021-06-26 16:50:56,576 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:24,测试用例标题:商品价格无效边界,执行成功!
2021-06-26 16:50:56,659 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:25,测试用例标题:商品价格非两位小数,执行成功!
2021-06-26 16:50:56,747 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:26,测试用例标题:商品价格为负数,执行成功!
2021-06-26 16:50:58,568 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-26 16:50:58,645 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-26 16:50:58,722 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-26 16:50:58,798 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-26 16:50:58,889 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:5,测试用例标题:商品名为空,执行成功!
2021-06-26 16:50:59,019 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:6,测试用例标题:商品名已存在,执行成功!
2021-06-26 16:50:59,121 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:7,测试用例标题:商品名的有效边界值,执行成功!
2021-06-26 16:50:59,208 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:8,测试用例标题:商品名无效边界值,执行成功!
2021-06-26 16:50:59,294 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:9,测试用例标题:商品分类ID为空,执行成功!
2021-06-26 16:50:59,379 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:10,测试用例标题:商品分类ID不存在,执行成功!
2021-06-26 16:50:59,471 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:11,测试用例标题:商品分类ID非数字,执行成功!
2021-06-26 16:50:59,568 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:12,测试用例标题:ID非5位数字,执行成功!
2021-06-26 16:50:59,671 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:13,测试用例标题:商品描述为空,执行成功!
2021-06-26 16:50:59,778 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:14,测试用例标题:商品描述有效边界值,执行成功!
2021-06-26 16:50:59,866 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:15,测试用例标题:商品描述无效边界值,执行成功!
2021-06-26 16:50:59,950 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:16,测试用例标题:商品库存为空,执行成功!
2021-06-26 16:51:00,061 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:17,测试用例标题:商品库存有效边界,执行成功!
2021-06-26 16:51:00,143 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:18,测试用例标题:商品库存无效边界值,执行成功!
2021-06-26 16:51:00,226 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:19,测试用例标题:商品库存非整数,执行成功!
2021-06-26 16:51:00,324 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:20,测试用例标题:商品库存为负数,执行成功!
2021-06-26 16:51:00,406 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:21,测试用例标题:商品价格为空,执行成功!
2021-06-26 16:51:00,488 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:22,测试用例标题:商品价格非数字,执行成功!
2021-06-26 16:51:00,588 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:23,测试用例标题:商品价格有效边界,执行成功!
2021-06-26 16:51:00,672 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:24,测试用例标题:商品价格无效边界,执行成功!
2021-06-26 16:51:00,753 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:25,测试用例标题:商品价格非两位小数,执行成功!
2021-06-26 16:51:00,836 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:26,测试用例标题:商品价格为负数,执行成功!
2021-06-26 16:51:04,468 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-26 16:51:04,548 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-26 16:51:04,632 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-26 16:51:04,713 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-26 16:51:04,807 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:5,测试用例标题:商品名为空,执行成功!
2021-06-26 16:51:04,906 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:6,测试用例标题:商品名已存在,执行成功!
2021-06-26 16:51:05,003 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:7,测试用例标题:商品名的有效边界值,执行成功!
2021-06-26 16:51:05,091 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:8,测试用例标题:商品名无效边界值,执行成功!
2021-06-26 16:51:05,178 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:9,测试用例标题:商品分类ID为空,执行成功!
2021-06-26 16:51:05,262 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:10,测试用例标题:商品分类ID不存在,执行成功!
2021-06-26 16:51:05,346 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:11,测试用例标题:商品分类ID非数字,执行成功!
2021-06-26 16:51:05,431 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:12,测试用例标题:ID非5位数字,执行成功!
2021-06-26 16:51:05,526 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:13,测试用例标题:商品描述为空,执行成功!
2021-06-26 16:51:05,625 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:14,测试用例标题:商品描述有效边界值,执行成功!
2021-06-26 16:51:05,707 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:15,测试用例标题:商品描述无效边界值,执行成功!
2021-06-26 16:51:05,789 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:16,测试用例标题:商品库存为空,执行成功!
2021-06-26 16:51:05,890 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:17,测试用例标题:商品库存有效边界,执行成功!
2021-06-26 16:51:05,973 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:18,测试用例标题:商品库存无效边界值,执行成功!
2021-06-26 16:51:06,056 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:19,测试用例标题:商品库存非整数,执行成功!
2021-06-26 16:51:06,163 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:20,测试用例标题:商品库存为负数,执行成功!
2021-06-26 16:51:06,244 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:21,测试用例标题:商品价格为空,执行成功!
2021-06-26 16:51:06,326 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:22,测试用例标题:商品价格非数字,执行成功!
2021-06-26 16:51:06,422 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:23,测试用例标题:商品价格有效边界,执行成功!
2021-06-26 16:51:06,506 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:24,测试用例标题:商品价格无效边界,执行成功!
2021-06-26 16:51:06,589 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:25,测试用例标题:商品价格非两位小数,执行成功!
2021-06-26 16:51:06,676 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:26,测试用例标题:商品价格为负数,执行成功!
2021-06-28 17:17:57,473 - [test_business_goods_promote02.py -->line:70] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:24:10,523 - [test_business_goods_promote02.py -->line:74] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:24:35,188 - [test_business_goods_promote02.py -->line:74] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:24:36,932 - [test_business_goods_promote02.py -->line:74] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:24:38,713 - [test_business_goods_promote02.py -->line:74] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:24:41,041 - [test_business_goods_promote02.py -->line:74] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:39:50,600 - [test_business_goods_promote03.py -->line:83] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:39:50,847 - [test_business_goods_promote03.py -->line:78] - ERROR:测试编号:2,测试用例标题:token为空,执行失败,实际结果为:{'code': 1001, 'msg': 'token值不能为空'}
2021-06-28 17:39:50,848 - [test_business_goods_promote03.py -->line:79] - ERROR: :: 1 != 0
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_goods_promote07\test_business_goods_promote03.py", line 73, in test_goods_promote
    self.assertEqual(1, count)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 1 != 0
2021-06-28 17:39:51,066 - [test_business_goods_promote03.py -->line:78] - ERROR:测试编号:3,测试用例标题:token过期,执行失败,实际结果为:{'code': 1010, 'msg': '鉴权失败,请检查token是否失效'}
2021-06-28 17:39:51,067 - [test_business_goods_promote03.py -->line:79] - ERROR: :: 1 != 0
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_goods_promote07\test_business_goods_promote03.py", line 73, in test_goods_promote
    self.assertEqual(1, count)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 1 != 0
2021-06-28 17:39:51,210 - [test_business_goods_promote03.py -->line:78] - ERROR:测试编号:4,测试用例标题:错误token值,执行失败,实际结果为:{'code': 1010, 'msg': '鉴权失败,请检查token是否失效'}
2021-06-28 17:39:51,210 - [test_business_goods_promote03.py -->line:79] - ERROR: :: 1 != 0
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_goods_promote07\test_business_goods_promote03.py", line 73, in test_goods_promote
    self.assertEqual(1, count)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 1 != 0
2021-06-28 17:39:51,351 - [test_business_goods_promote03.py -->line:78] - ERROR:测试编号:5,测试用例标题:促销开始时间为空,执行失败,实际结果为:{'code': 1002, 'msg': '促销开始时间不能为空'}
2021-06-28 17:39:51,351 - [test_business_goods_promote03.py -->line:79] - ERROR: :: 1 != 0
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_goods_promote07\test_business_goods_promote03.py", line 73, in test_goods_promote
    self.assertEqual(1, count)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 1 != 0
2021-06-28 17:39:51,487 - [test_business_goods_promote03.py -->line:78] - ERROR:测试编号:6,测试用例标题:促销开始时间格式错误,执行失败,实际结果为:{'code': 1005, 'msg': '促销开始时间格式不正确'}
2021-06-28 17:39:51,487 - [test_business_goods_promote03.py -->line:79] - ERROR: :: 1 != 0
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_goods_promote07\test_business_goods_promote03.py", line 73, in test_goods_promote
    self.assertEqual(1, count)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 1 != 0
2021-06-28 17:39:51,627 - [test_business_goods_promote03.py -->line:78] - ERROR:测试编号:7,测试用例标题:促销开始时间早于当前时间,执行失败,实际结果为:{'code': 1008, 'msg': '促销开始时间必须大于当前时间'}
2021-06-28 17:39:51,627 - [test_business_goods_promote03.py -->line:79] - ERROR: :: 1 != 0
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_goods_promote07\test_business_goods_promote03.py", line 73, in test_goods_promote
    self.assertEqual(1, count)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 1 != 0
2021-06-28 17:39:51,766 - [test_business_goods_promote03.py -->line:78] - ERROR:测试编号:8,测试用例标题:促销结束时间为空,执行失败,实际结果为:{'code': 1003, 'msg': '促销结束时间不能为空'}
2021-06-28 17:39:51,766 - [test_business_goods_promote03.py -->line:79] - ERROR: :: 1 != 0
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_goods_promote07\test_business_goods_promote03.py", line 73, in test_goods_promote
    self.assertEqual(1, count)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 1 != 0
2021-06-28 17:39:51,904 - [test_business_goods_promote03.py -->line:78] - ERROR:测试编号:9,测试用例标题:促销结束时间格式错误,执行失败,实际结果为:{'code': 1006, 'msg': '促销结束时间格式不正确'}
2021-06-28 17:39:51,904 - [test_business_goods_promote03.py -->line:79] - ERROR: :: 1 != 0
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_goods_promote07\test_business_goods_promote03.py", line 73, in test_goods_promote
    self.assertEqual(1, count)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 1 != 0
2021-06-28 17:39:52,042 - [test_business_goods_promote03.py -->line:78] - ERROR:测试编号:10,测试用例标题:商品编号为空,执行失败,实际结果为:{'code': 1004, 'msg': '商品编号不能为空'}
2021-06-28 17:39:52,042 - [test_business_goods_promote03.py -->line:79] - ERROR: :: 1 != 0
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_goods_promote07\test_business_goods_promote03.py", line 73, in test_goods_promote
    self.assertEqual(1, count)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 1 != 0
2021-06-28 17:39:52,179 - [test_business_goods_promote03.py -->line:78] - ERROR:测试编号:11,测试用例标题:商品编号非6位数字,执行失败,实际结果为:{'code': 1007, 'msg': '商品编号格式不正确'}
2021-06-28 17:39:52,179 - [test_business_goods_promote03.py -->line:79] - ERROR: :: 1 != 0
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_goods_promote07\test_business_goods_promote03.py", line 73, in test_goods_promote
    self.assertEqual(1, count)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 1 != 0
2021-06-28 17:39:52,316 - [test_business_goods_promote03.py -->line:78] - ERROR:测试编号:12,测试用例标题:商品编号非数字,执行失败,实际结果为:{'code': 1007, 'msg': '商品编号格式不正确'}
2021-06-28 17:39:52,316 - [test_business_goods_promote03.py -->line:79] - ERROR: :: 1 != 0
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_goods_promote07\test_business_goods_promote03.py", line 73, in test_goods_promote
    self.assertEqual(1, count)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 1 != 0
2021-06-28 17:39:52,456 - [test_business_goods_promote03.py -->line:78] - ERROR:测试编号:13,测试用例标题:商品编号不存在,执行失败,实际结果为:{'code': 1011, 'msg': '该商品不存在'}
2021-06-28 17:39:52,456 - [test_business_goods_promote03.py -->line:79] - ERROR: :: 1 != 0
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_goods_promote07\test_business_goods_promote03.py", line 73, in test_goods_promote
    self.assertEqual(1, count)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 1 != 0
2021-06-28 17:39:52,594 - [test_business_goods_promote03.py -->line:78] - ERROR:测试编号:14,测试用例标题:促销开始时间晚于促销结束时间,执行失败,实际结果为:{'code': 1009, 'msg': '促销结束时间必须大于等于促销开始时间'}
2021-06-28 17:39:52,594 - [test_business_goods_promote03.py -->line:79] - ERROR: :: 1 != 0
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_goods_promote07\test_business_goods_promote03.py", line 73, in test_goods_promote
    self.assertEqual(1, count)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 1 != 0
2021-06-28 17:39:52,745 - [test_business_goods_promote03.py -->line:83] - INFO:测试编号:15,测试用例标题:重复开启促销,执行成功!
2021-06-28 17:39:52,897 - [test_business_goods_promote03.py -->line:83] - INFO:测试编号:16,测试用例标题:未上架商品开启促销,执行成功!
2021-06-28 17:47:25,445 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:47:25,699 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-28 17:47:25,914 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-28 17:47:26,052 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-28 17:47:26,193 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:5,测试用例标题:促销开始时间为空,执行成功!
2021-06-28 17:47:26,329 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:6,测试用例标题:促销开始时间格式错误,执行成功!
2021-06-28 17:47:26,463 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:7,测试用例标题:促销开始时间早于当前时间,执行成功!
2021-06-28 17:47:26,599 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:8,测试用例标题:促销结束时间为空,执行成功!
2021-06-28 17:47:26,736 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:9,测试用例标题:促销结束时间格式错误,执行成功!
2021-06-28 17:47:26,872 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:10,测试用例标题:商品编号为空,执行成功!
2021-06-28 17:47:27,021 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:11,测试用例标题:商品编号非6位数字,执行成功!
2021-06-28 17:47:27,158 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:12,测试用例标题:商品编号非数字,执行成功!
2021-06-28 17:47:27,294 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:13,测试用例标题:商品编号不存在,执行成功!
2021-06-28 17:47:27,429 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:14,测试用例标题:促销开始时间晚于促销结束时间,执行成功!
2021-06-28 17:47:27,566 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:15,测试用例标题:重复开启促销,执行成功!
2021-06-28 17:47:27,708 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:16,测试用例标题:未上架商品开启促销,执行成功!
2021-06-28 17:47:31,580 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:47:31,823 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-28 17:47:32,044 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-28 17:47:32,185 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-28 17:47:32,322 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:5,测试用例标题:促销开始时间为空,执行成功!
2021-06-28 17:47:32,460 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:6,测试用例标题:促销开始时间格式错误,执行成功!
2021-06-28 17:47:32,594 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:7,测试用例标题:促销开始时间早于当前时间,执行成功!
2021-06-28 17:47:32,737 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:8,测试用例标题:促销结束时间为空,执行成功!
2021-06-28 17:47:32,875 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:9,测试用例标题:促销结束时间格式错误,执行成功!
2021-06-28 17:47:33,012 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:10,测试用例标题:商品编号为空,执行成功!
2021-06-28 17:47:33,159 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:11,测试用例标题:商品编号非6位数字,执行成功!
2021-06-28 17:47:33,295 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:12,测试用例标题:商品编号非数字,执行成功!
2021-06-28 17:47:33,434 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:13,测试用例标题:商品编号不存在,执行成功!
2021-06-28 17:47:33,571 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:14,测试用例标题:促销开始时间晚于促销结束时间,执行成功!
2021-06-28 17:47:33,711 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:15,测试用例标题:重复开启促销,执行成功!
2021-06-28 17:47:33,897 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:16,测试用例标题:未上架商品开启促销,执行成功!
2021-06-28 17:47:36,920 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:47:37,164 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-28 17:47:37,378 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-28 17:47:37,518 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-28 17:47:37,652 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:5,测试用例标题:促销开始时间为空,执行成功!
2021-06-28 17:47:37,788 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:6,测试用例标题:促销开始时间格式错误,执行成功!
2021-06-28 17:47:37,923 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:7,测试用例标题:促销开始时间早于当前时间,执行成功!
2021-06-28 17:47:38,057 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:8,测试用例标题:促销结束时间为空,执行成功!
2021-06-28 17:47:38,192 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:9,测试用例标题:促销结束时间格式错误,执行成功!
2021-06-28 17:47:38,327 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:10,测试用例标题:商品编号为空,执行成功!
2021-06-28 17:47:38,462 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:11,测试用例标题:商品编号非6位数字,执行成功!
2021-06-28 17:47:38,600 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:12,测试用例标题:商品编号非数字,执行成功!
2021-06-28 17:47:38,735 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:13,测试用例标题:商品编号不存在,执行成功!
2021-06-28 17:47:38,871 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:14,测试用例标题:促销开始时间晚于促销结束时间,执行成功!
2021-06-28 17:47:39,009 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:15,测试用例标题:重复开启促销,执行成功!
2021-06-28 17:47:39,174 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:16,测试用例标题:未上架商品开启促销,执行成功!
2021-06-28 17:47:47,726 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:47:47,971 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-28 17:47:48,189 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-28 17:47:48,332 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-28 17:47:48,468 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:5,测试用例标题:促销开始时间为空,执行成功!
2021-06-28 17:47:48,605 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:6,测试用例标题:促销开始时间格式错误,执行成功!
2021-06-28 17:47:48,739 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:7,测试用例标题:促销开始时间早于当前时间,执行成功!
2021-06-28 17:47:48,874 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:8,测试用例标题:促销结束时间为空,执行成功!
2021-06-28 17:47:49,011 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:9,测试用例标题:促销结束时间格式错误,执行成功!
2021-06-28 17:47:49,147 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:10,测试用例标题:商品编号为空,执行成功!
2021-06-28 17:47:49,282 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:11,测试用例标题:商品编号非6位数字,执行成功!
2021-06-28 17:47:49,419 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:12,测试用例标题:商品编号非数字,执行成功!
2021-06-28 17:47:49,556 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:13,测试用例标题:商品编号不存在,执行成功!
2021-06-28 17:47:49,691 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:14,测试用例标题:促销开始时间晚于促销结束时间,执行成功!
2021-06-28 17:47:49,829 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:15,测试用例标题:重复开启促销,执行成功!
2021-06-28 17:49:20,376 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:49:20,619 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-28 17:49:20,833 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-28 17:49:20,970 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-28 17:49:21,114 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:5,测试用例标题:促销开始时间为空,执行成功!
2021-06-28 17:49:21,278 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:6,测试用例标题:促销开始时间格式错误,执行成功!
2021-06-28 17:49:21,460 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:7,测试用例标题:促销开始时间早于当前时间,执行成功!
2021-06-28 17:49:21,634 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:8,测试用例标题:促销结束时间为空,执行成功!
2021-06-28 17:49:21,779 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:9,测试用例标题:促销结束时间格式错误,执行成功!
2021-06-28 17:49:21,918 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:10,测试用例标题:商品编号为空,执行成功!
2021-06-28 17:49:22,055 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:11,测试用例标题:商品编号非6位数字,执行成功!
2021-06-28 17:49:22,191 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:12,测试用例标题:商品编号非数字,执行成功!
2021-06-28 17:49:22,330 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:13,测试用例标题:商品编号不存在,执行成功!
2021-06-28 17:49:22,468 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:14,测试用例标题:促销开始时间晚于促销结束时间,执行成功!
2021-06-28 17:49:22,623 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:16,测试用例标题:未上架商品开启促销,执行成功!
2021-06-28 17:49:53,127 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:49:53,414 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-28 17:49:53,616 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-28 17:49:53,756 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-28 17:49:53,893 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:5,测试用例标题:促销开始时间为空,执行成功!
2021-06-28 17:49:54,031 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:6,测试用例标题:促销开始时间格式错误,执行成功!
2021-06-28 17:49:54,167 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:7,测试用例标题:促销开始时间早于当前时间,执行成功!
2021-06-28 17:49:54,305 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:8,测试用例标题:促销结束时间为空,执行成功!
2021-06-28 17:49:54,443 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:9,测试用例标题:促销结束时间格式错误,执行成功!
2021-06-28 17:49:54,577 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:10,测试用例标题:商品编号为空,执行成功!
2021-06-28 17:49:54,714 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:11,测试用例标题:商品编号非6位数字,执行成功!
2021-06-28 17:49:54,850 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:12,测试用例标题:商品编号非数字,执行成功!
2021-06-28 17:49:54,986 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:13,测试用例标题:商品编号不存在,执行成功!
2021-06-28 17:49:55,119 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:14,测试用例标题:促销开始时间晚于促销结束时间,执行成功!
2021-06-28 17:49:55,256 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:15,测试用例标题:重复开启促销,执行成功!
2021-06-28 17:49:55,411 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:16,测试用例标题:未上架商品开启促销,执行成功!
2021-06-28 17:49:59,892 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:50:00,137 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-28 17:50:00,350 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-28 17:50:00,488 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-28 17:50:00,623 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:5,测试用例标题:促销开始时间为空,执行成功!
2021-06-28 17:50:00,757 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:6,测试用例标题:促销开始时间格式错误,执行成功!
2021-06-28 17:50:00,897 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:7,测试用例标题:促销开始时间早于当前时间,执行成功!
2021-06-28 17:50:01,033 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:8,测试用例标题:促销结束时间为空,执行成功!
2021-06-28 17:50:01,168 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:9,测试用例标题:促销结束时间格式错误,执行成功!
2021-06-28 17:50:01,302 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:10,测试用例标题:商品编号为空,执行成功!
2021-06-28 17:50:01,437 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:11,测试用例标题:商品编号非6位数字,执行成功!
2021-06-28 17:50:01,572 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:12,测试用例标题:商品编号非数字,执行成功!
2021-06-28 17:50:01,710 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:13,测试用例标题:商品编号不存在,执行成功!
2021-06-28 17:50:01,849 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:14,测试用例标题:促销开始时间晚于促销结束时间,执行成功!
2021-06-28 17:50:01,990 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:15,测试用例标题:重复开启促销,执行成功!
2021-06-28 17:50:02,143 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:16,测试用例标题:未上架商品开启促销,执行成功!
2021-06-28 17:50:04,686 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:50:04,930 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-28 17:50:05,145 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-28 17:50:05,286 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-28 17:50:05,422 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:5,测试用例标题:促销开始时间为空,执行成功!
2021-06-28 17:50:05,558 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:6,测试用例标题:促销开始时间格式错误,执行成功!
2021-06-28 17:50:05,694 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:7,测试用例标题:促销开始时间早于当前时间,执行成功!
2021-06-28 17:50:05,832 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:8,测试用例标题:促销结束时间为空,执行成功!
2021-06-28 17:50:05,968 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:9,测试用例标题:促销结束时间格式错误,执行成功!
2021-06-28 17:50:06,104 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:10,测试用例标题:商品编号为空,执行成功!
2021-06-28 17:50:06,240 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:11,测试用例标题:商品编号非6位数字,执行成功!
2021-06-28 17:50:06,376 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:12,测试用例标题:商品编号非数字,执行成功!
2021-06-28 17:50:06,515 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:13,测试用例标题:商品编号不存在,执行成功!
2021-06-28 17:50:06,649 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:14,测试用例标题:促销开始时间晚于促销结束时间,执行成功!
2021-06-28 17:50:06,789 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:15,测试用例标题:重复开启促销,执行成功!
2021-06-28 17:50:06,943 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:16,测试用例标题:未上架商品开启促销,执行成功!
2021-06-28 17:50:09,699 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:50:09,943 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-28 17:50:10,156 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-28 17:50:10,294 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-28 17:50:10,430 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:5,测试用例标题:促销开始时间为空,执行成功!
2021-06-28 17:50:10,564 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:6,测试用例标题:促销开始时间格式错误,执行成功!
2021-06-28 17:50:10,708 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:7,测试用例标题:促销开始时间早于当前时间,执行成功!
2021-06-28 17:50:10,842 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:8,测试用例标题:促销结束时间为空,执行成功!
2021-06-28 17:50:10,979 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:9,测试用例标题:促销结束时间格式错误,执行成功!
2021-06-28 17:50:11,115 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:10,测试用例标题:商品编号为空,执行成功!
2021-06-28 17:50:11,249 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:11,测试用例标题:商品编号非6位数字,执行成功!
2021-06-28 17:50:11,384 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:12,测试用例标题:商品编号非数字,执行成功!
2021-06-28 17:50:11,521 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:13,测试用例标题:商品编号不存在,执行成功!
2021-06-28 17:50:11,660 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:14,测试用例标题:促销开始时间晚于促销结束时间,执行成功!
2021-06-28 17:50:11,814 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:15,测试用例标题:重复开启促销,执行成功!
2021-06-28 17:50:11,965 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:16,测试用例标题:未上架商品开启促销,执行成功!
2021-06-28 17:50:13,912 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:50:14,163 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-28 17:50:14,374 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-28 17:50:14,514 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-28 17:50:14,671 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:5,测试用例标题:促销开始时间为空,执行成功!
2021-06-28 17:50:14,824 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:6,测试用例标题:促销开始时间格式错误,执行成功!
2021-06-28 17:50:14,961 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:7,测试用例标题:促销开始时间早于当前时间,执行成功!
2021-06-28 17:50:15,097 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:8,测试用例标题:促销结束时间为空,执行成功!
2021-06-28 17:50:15,231 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:9,测试用例标题:促销结束时间格式错误,执行成功!
2021-06-28 17:50:15,369 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:10,测试用例标题:商品编号为空,执行成功!
2021-06-28 17:50:15,505 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:11,测试用例标题:商品编号非6位数字,执行成功!
2021-06-28 17:50:15,641 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:12,测试用例标题:商品编号非数字,执行成功!
2021-06-28 17:50:15,778 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:13,测试用例标题:商品编号不存在,执行成功!
2021-06-28 17:50:15,915 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:14,测试用例标题:促销开始时间晚于促销结束时间,执行成功!
2021-06-28 17:50:16,066 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:15,测试用例标题:重复开启促销,执行成功!
2021-06-28 17:50:16,221 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:16,测试用例标题:未上架商品开启促销,执行成功!
2021-06-28 17:50:17,935 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:50:18,177 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-28 17:50:18,387 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-28 17:50:18,528 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-28 17:50:18,662 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:5,测试用例标题:促销开始时间为空,执行成功!
2021-06-28 17:50:18,799 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:6,测试用例标题:促销开始时间格式错误,执行成功!
2021-06-28 17:50:18,935 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:7,测试用例标题:促销开始时间早于当前时间,执行成功!
2021-06-28 17:50:19,074 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:8,测试用例标题:促销结束时间为空,执行成功!
2021-06-28 17:50:19,214 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:9,测试用例标题:促销结束时间格式错误,执行成功!
2021-06-28 17:50:19,352 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:10,测试用例标题:商品编号为空,执行成功!
2021-06-28 17:50:19,486 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:11,测试用例标题:商品编号非6位数字,执行成功!
2021-06-28 17:50:19,620 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:12,测试用例标题:商品编号非数字,执行成功!
2021-06-28 17:50:19,760 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:13,测试用例标题:商品编号不存在,执行成功!
2021-06-28 17:50:19,897 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:14,测试用例标题:促销开始时间晚于促销结束时间,执行成功!
2021-06-28 17:50:20,036 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:15,测试用例标题:重复开启促销,执行成功!
2021-06-28 17:50:20,192 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:16,测试用例标题:未上架商品开启促销,执行成功!
2021-06-28 17:50:22,769 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:50:23,012 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-28 17:50:23,227 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-28 17:50:23,367 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-28 17:50:23,503 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:5,测试用例标题:促销开始时间为空,执行成功!
2021-06-28 17:50:23,643 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:6,测试用例标题:促销开始时间格式错误,执行成功!
2021-06-28 17:50:23,781 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:7,测试用例标题:促销开始时间早于当前时间,执行成功!
2021-06-28 17:50:23,917 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:8,测试用例标题:促销结束时间为空,执行成功!
2021-06-28 17:50:24,056 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:9,测试用例标题:促销结束时间格式错误,执行成功!
2021-06-28 17:50:24,191 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:10,测试用例标题:商品编号为空,执行成功!
2021-06-28 17:50:24,326 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:11,测试用例标题:商品编号非6位数字,执行成功!
2021-06-28 17:50:24,460 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:12,测试用例标题:商品编号非数字,执行成功!
2021-06-28 17:50:24,595 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:13,测试用例标题:商品编号不存在,执行成功!
2021-06-28 17:50:24,733 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:14,测试用例标题:促销开始时间晚于促销结束时间,执行成功!
2021-06-28 17:50:24,871 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:15,测试用例标题:重复开启促销,执行成功!
2021-06-28 17:50:25,022 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:16,测试用例标题:未上架商品开启促销,执行成功!
2021-06-28 17:50:27,173 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:50:27,416 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-28 17:50:27,628 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-28 17:50:27,768 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-28 17:50:27,904 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:5,测试用例标题:促销开始时间为空,执行成功!
2021-06-28 17:50:28,039 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:6,测试用例标题:促销开始时间格式错误,执行成功!
2021-06-28 17:50:28,177 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:7,测试用例标题:促销开始时间早于当前时间,执行成功!
2021-06-28 17:50:28,312 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:8,测试用例标题:促销结束时间为空,执行成功!
2021-06-28 17:50:28,448 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:9,测试用例标题:促销结束时间格式错误,执行成功!
2021-06-28 17:50:28,586 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:10,测试用例标题:商品编号为空,执行成功!
2021-06-28 17:50:28,720 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:11,测试用例标题:商品编号非6位数字,执行成功!
2021-06-28 17:50:28,857 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:12,测试用例标题:商品编号非数字,执行成功!
2021-06-28 17:50:28,994 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:13,测试用例标题:商品编号不存在,执行成功!
2021-06-28 17:50:29,130 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:14,测试用例标题:促销开始时间晚于促销结束时间,执行成功!
2021-06-28 17:50:29,269 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:15,测试用例标题:重复开启促销,执行成功!
2021-06-28 17:50:29,424 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:16,测试用例标题:未上架商品开启促销,执行成功!
2021-06-28 17:50:32,332 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:50:32,577 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-28 17:50:32,795 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-28 17:50:32,936 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-28 17:50:33,071 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:5,测试用例标题:促销开始时间为空,执行成功!
2021-06-28 17:50:33,207 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:6,测试用例标题:促销开始时间格式错误,执行成功!
2021-06-28 17:50:33,342 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:7,测试用例标题:促销开始时间早于当前时间,执行成功!
2021-06-28 17:50:33,479 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:8,测试用例标题:促销结束时间为空,执行成功!
2021-06-28 17:50:33,612 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:9,测试用例标题:促销结束时间格式错误,执行成功!
2021-06-28 17:50:33,747 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:10,测试用例标题:商品编号为空,执行成功!
2021-06-28 17:50:33,883 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:11,测试用例标题:商品编号非6位数字,执行成功!
2021-06-28 17:50:34,018 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:12,测试用例标题:商品编号非数字,执行成功!
2021-06-28 17:50:34,156 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:13,测试用例标题:商品编号不存在,执行成功!
2021-06-28 17:50:34,290 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:14,测试用例标题:促销开始时间晚于促销结束时间,执行成功!
2021-06-28 17:50:34,429 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:15,测试用例标题:重复开启促销,执行成功!
2021-06-28 17:50:34,583 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:16,测试用例标题:未上架商品开启促销,执行成功!
2021-06-28 17:50:37,410 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:50:37,651 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-28 17:50:37,869 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-28 17:50:38,006 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-28 17:50:38,142 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:5,测试用例标题:促销开始时间为空,执行成功!
2021-06-28 17:50:38,282 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:6,测试用例标题:促销开始时间格式错误,执行成功!
2021-06-28 17:50:38,417 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:7,测试用例标题:促销开始时间早于当前时间,执行成功!
2021-06-28 17:50:38,553 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:8,测试用例标题:促销结束时间为空,执行成功!
2021-06-28 17:50:38,687 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:9,测试用例标题:促销结束时间格式错误,执行成功!
2021-06-28 17:50:38,824 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:10,测试用例标题:商品编号为空,执行成功!
2021-06-28 17:50:38,960 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:11,测试用例标题:商品编号非6位数字,执行成功!
2021-06-28 17:50:39,093 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:12,测试用例标题:商品编号非数字,执行成功!
2021-06-28 17:50:39,229 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:13,测试用例标题:商品编号不存在,执行成功!
2021-06-28 17:50:39,364 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:14,测试用例标题:促销开始时间晚于促销结束时间,执行成功!
2021-06-28 17:50:39,503 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:15,测试用例标题:重复开启促销,执行成功!
2021-06-28 17:50:39,662 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:16,测试用例标题:未上架商品开启促销,执行成功!
2021-06-28 17:50:45,119 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:50:45,365 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-28 17:50:45,564 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-28 17:50:45,719 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-28 17:50:45,856 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:5,测试用例标题:促销开始时间为空,执行成功!
2021-06-28 17:50:45,991 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:6,测试用例标题:促销开始时间格式错误,执行成功!
2021-06-28 17:50:46,132 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:7,测试用例标题:促销开始时间早于当前时间,执行成功!
2021-06-28 17:50:46,271 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:8,测试用例标题:促销结束时间为空,执行成功!
2021-06-28 17:50:46,408 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:9,测试用例标题:促销结束时间格式错误,执行成功!
2021-06-28 17:50:46,546 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:10,测试用例标题:商品编号为空,执行成功!
2021-06-28 17:50:46,681 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:11,测试用例标题:商品编号非6位数字,执行成功!
2021-06-28 17:50:46,816 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:12,测试用例标题:商品编号非数字,执行成功!
2021-06-28 17:50:46,953 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:13,测试用例标题:商品编号不存在,执行成功!
2021-06-28 17:50:47,092 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:14,测试用例标题:促销开始时间晚于促销结束时间,执行成功!
2021-06-28 17:50:47,229 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:15,测试用例标题:重复开启促销,执行成功!
2021-06-28 17:50:47,382 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:16,测试用例标题:未上架商品开启促销,执行成功!
2021-06-28 17:50:55,592 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:50:55,852 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-28 17:50:56,068 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-28 17:50:56,210 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-28 17:50:56,346 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:5,测试用例标题:促销开始时间为空,执行成功!
2021-06-28 17:50:56,481 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:6,测试用例标题:促销开始时间格式错误,执行成功!
2021-06-28 17:50:56,616 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:7,测试用例标题:促销开始时间早于当前时间,执行成功!
2021-06-28 17:50:56,751 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:8,测试用例标题:促销结束时间为空,执行成功!
2021-06-28 17:50:56,888 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:9,测试用例标题:促销结束时间格式错误,执行成功!
2021-06-28 17:50:57,021 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:10,测试用例标题:商品编号为空,执行成功!
2021-06-28 17:50:57,195 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:11,测试用例标题:商品编号非6位数字,执行成功!
2021-06-28 17:50:57,331 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:12,测试用例标题:商品编号非数字,执行成功!
2021-06-28 17:50:57,469 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:13,测试用例标题:商品编号不存在,执行成功!
2021-06-28 17:50:57,605 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:14,测试用例标题:促销开始时间晚于促销结束时间,执行成功!
2021-06-28 17:50:57,742 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:15,测试用例标题:重复开启促销,执行成功!
2021-06-28 17:50:57,897 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:16,测试用例标题:未上架商品开启促销,执行成功!
2021-06-28 17:51:12,612 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:51:12,856 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-28 17:51:13,067 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-28 17:51:13,206 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-28 17:51:13,342 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:5,测试用例标题:促销开始时间为空,执行成功!
2021-06-28 17:51:13,476 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:6,测试用例标题:促销开始时间格式错误,执行成功!
2021-06-28 17:51:13,610 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:7,测试用例标题:促销开始时间早于当前时间,执行成功!
2021-06-28 17:51:13,746 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:8,测试用例标题:促销结束时间为空,执行成功!
2021-06-28 17:51:13,882 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:9,测试用例标题:促销结束时间格式错误,执行成功!
2021-06-28 17:51:14,016 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:10,测试用例标题:商品编号为空,执行成功!
2021-06-28 17:51:14,150 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:11,测试用例标题:商品编号非6位数字,执行成功!
2021-06-28 17:51:14,283 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:12,测试用例标题:商品编号非数字,执行成功!
2021-06-28 17:51:14,418 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:13,测试用例标题:商品编号不存在,执行成功!
2021-06-28 17:51:14,553 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:14,测试用例标题:促销开始时间晚于促销结束时间,执行成功!
2021-06-28 17:51:14,689 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:15,测试用例标题:重复开启促销,执行成功!
2021-06-28 17:51:14,846 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:16,测试用例标题:未上架商品开启促销,执行成功!
2021-06-28 17:51:25,152 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:51:25,400 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-28 17:51:25,618 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-28 17:51:25,758 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-28 17:51:25,894 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:5,测试用例标题:促销开始时间为空,执行成功!
2021-06-28 17:51:26,030 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:6,测试用例标题:促销开始时间格式错误,执行成功!
2021-06-28 17:51:26,165 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:7,测试用例标题:促销开始时间早于当前时间,执行成功!
2021-06-28 17:51:26,302 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:8,测试用例标题:促销结束时间为空,执行成功!
2021-06-28 17:51:26,437 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:9,测试用例标题:促销结束时间格式错误,执行成功!
2021-06-28 17:51:26,573 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:10,测试用例标题:商品编号为空,执行成功!
2021-06-28 17:51:26,709 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:11,测试用例标题:商品编号非6位数字,执行成功!
2021-06-28 17:51:26,846 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:12,测试用例标题:商品编号非数字,执行成功!
2021-06-28 17:51:26,983 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:13,测试用例标题:商品编号不存在,执行成功!
2021-06-28 17:51:27,119 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:14,测试用例标题:促销开始时间晚于促销结束时间,执行成功!
2021-06-28 17:51:27,258 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:15,测试用例标题:重复开启促销,执行成功!
2021-06-28 17:51:27,407 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:16,测试用例标题:未上架商品开启促销,执行成功!
2021-06-28 17:51:33,477 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:51:33,730 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-28 17:51:33,952 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-28 17:51:34,097 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-28 17:51:34,244 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:5,测试用例标题:促销开始时间为空,执行成功!
2021-06-28 17:51:34,392 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:6,测试用例标题:促销开始时间格式错误,执行成功!
2021-06-28 17:51:34,541 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:7,测试用例标题:促销开始时间早于当前时间,执行成功!
2021-06-28 17:51:34,678 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:8,测试用例标题:促销结束时间为空,执行成功!
2021-06-28 17:51:34,814 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:9,测试用例标题:促销结束时间格式错误,执行成功!
2021-06-28 17:51:34,952 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:10,测试用例标题:商品编号为空,执行成功!
2021-06-28 17:51:35,088 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:11,测试用例标题:商品编号非6位数字,执行成功!
2021-06-28 17:51:35,242 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:12,测试用例标题:商品编号非数字,执行成功!
2021-06-28 17:51:35,380 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:13,测试用例标题:商品编号不存在,执行成功!
2021-06-28 17:51:35,519 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:14,测试用例标题:促销开始时间晚于促销结束时间,执行成功!
2021-06-28 17:51:35,663 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:15,测试用例标题:重复开启促销,执行成功!
2021-06-28 17:51:35,813 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:16,测试用例标题:未上架商品开启促销,执行成功!
2021-06-28 17:51:41,957 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:51:42,201 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-28 17:51:42,423 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-28 17:51:42,563 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-28 17:51:42,698 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:5,测试用例标题:促销开始时间为空,执行成功!
2021-06-28 17:51:42,834 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:6,测试用例标题:促销开始时间格式错误,执行成功!
2021-06-28 17:51:42,980 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:7,测试用例标题:促销开始时间早于当前时间,执行成功!
2021-06-28 17:51:43,114 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:8,测试用例标题:促销结束时间为空,执行成功!
2021-06-28 17:51:43,250 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:9,测试用例标题:促销结束时间格式错误,执行成功!
2021-06-28 17:51:43,382 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:10,测试用例标题:商品编号为空,执行成功!
2021-06-28 17:51:43,516 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:11,测试用例标题:商品编号非6位数字,执行成功!
2021-06-28 17:51:43,649 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:12,测试用例标题:商品编号非数字,执行成功!
2021-06-28 17:51:43,786 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:13,测试用例标题:商品编号不存在,执行成功!
2021-06-28 17:51:43,925 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:14,测试用例标题:促销开始时间晚于促销结束时间,执行成功!
2021-06-28 17:51:44,064 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:15,测试用例标题:重复开启促销,执行成功!
2021-06-28 17:51:44,220 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:16,测试用例标题:未上架商品开启促销,执行成功!
2021-06-28 17:51:49,872 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:51:50,119 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-28 17:51:50,333 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-28 17:51:50,472 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-28 17:51:50,608 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:5,测试用例标题:促销开始时间为空,执行成功!
2021-06-28 17:51:50,746 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:6,测试用例标题:促销开始时间格式错误,执行成功!
2021-06-28 17:51:50,900 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:7,测试用例标题:促销开始时间早于当前时间,执行成功!
2021-06-28 17:51:51,099 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:8,测试用例标题:促销结束时间为空,执行成功!
2021-06-28 17:51:51,256 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:9,测试用例标题:促销结束时间格式错误,执行成功!
2021-06-28 17:51:51,393 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:10,测试用例标题:商品编号为空,执行成功!
2021-06-28 17:51:51,531 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:11,测试用例标题:商品编号非6位数字,执行成功!
2021-06-28 17:51:51,670 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:12,测试用例标题:商品编号非数字,执行成功!
2021-06-28 17:51:51,810 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:13,测试用例标题:商品编号不存在,执行成功!
2021-06-28 17:51:51,948 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:14,测试用例标题:促销开始时间晚于促销结束时间,执行成功!
2021-06-28 17:51:52,089 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:15,测试用例标题:重复开启促销,执行成功!
2021-06-28 17:51:52,246 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:16,测试用例标题:未上架商品开启促销,执行成功!
2021-06-28 17:52:03,861 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:52:04,110 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-28 17:52:04,321 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-28 17:52:04,460 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-28 17:52:04,597 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:5,测试用例标题:促销开始时间为空,执行成功!
2021-06-28 17:52:04,732 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:6,测试用例标题:促销开始时间格式错误,执行成功!
2021-06-28 17:52:04,867 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:7,测试用例标题:促销开始时间早于当前时间,执行成功!
2021-06-28 17:52:05,004 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:8,测试用例标题:促销结束时间为空,执行成功!
2021-06-28 17:52:05,140 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:9,测试用例标题:促销结束时间格式错误,执行成功!
2021-06-28 17:52:05,275 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:10,测试用例标题:商品编号为空,执行成功!
2021-06-28 17:52:05,409 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:11,测试用例标题:商品编号非6位数字,执行成功!
2021-06-28 17:52:05,544 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:12,测试用例标题:商品编号非数字,执行成功!
2021-06-28 17:52:05,686 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:13,测试用例标题:商品编号不存在,执行成功!
2021-06-28 17:52:05,840 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:14,测试用例标题:促销开始时间晚于促销结束时间,执行成功!
2021-06-28 17:52:05,980 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:15,测试用例标题:重复开启促销,执行成功!
2021-06-28 17:52:06,132 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:16,测试用例标题:未上架商品开启促销,执行成功!
2021-06-28 17:52:12,528 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:52:12,772 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-28 17:52:12,986 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-28 17:52:13,123 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-28 17:52:13,274 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:5,测试用例标题:促销开始时间为空,执行成功!
2021-06-28 17:52:13,413 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:6,测试用例标题:促销开始时间格式错误,执行成功!
2021-06-28 17:52:13,550 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:7,测试用例标题:促销开始时间早于当前时间,执行成功!
2021-06-28 17:52:13,686 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:8,测试用例标题:促销结束时间为空,执行成功!
2021-06-28 17:52:13,822 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:9,测试用例标题:促销结束时间格式错误,执行成功!
2021-06-28 17:52:13,957 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:10,测试用例标题:商品编号为空,执行成功!
2021-06-28 17:52:14,092 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:11,测试用例标题:商品编号非6位数字,执行成功!
2021-06-28 17:52:14,225 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:12,测试用例标题:商品编号非数字,执行成功!
2021-06-28 17:52:14,364 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:13,测试用例标题:商品编号不存在,执行成功!
2021-06-28 17:52:14,502 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:14,测试用例标题:促销开始时间晚于促销结束时间,执行成功!
2021-06-28 17:52:14,641 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:15,测试用例标题:重复开启促销,执行成功!
2021-06-28 17:52:14,791 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:16,测试用例标题:未上架商品开启促销,执行成功!
2021-06-28 17:53:14,514 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:53:14,754 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-28 17:53:14,910 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-28 17:53:15,044 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-28 17:53:15,178 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:5,测试用例标题:促销开始时间为空,执行成功!
2021-06-28 17:53:15,351 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:6,测试用例标题:促销开始时间格式错误,执行成功!
2021-06-28 17:53:15,494 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:7,测试用例标题:促销开始时间早于当前时间,执行成功!
2021-06-28 17:53:15,631 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:8,测试用例标题:促销结束时间为空,执行成功!
2021-06-28 17:53:15,771 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:9,测试用例标题:促销结束时间格式错误,执行成功!
2021-06-28 17:53:15,909 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:10,测试用例标题:商品编号为空,执行成功!
2021-06-28 17:53:16,049 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:11,测试用例标题:商品编号非6位数字,执行成功!
2021-06-28 17:53:16,233 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:12,测试用例标题:商品编号非数字,执行成功!
2021-06-28 17:53:16,372 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:13,测试用例标题:商品编号不存在,执行成功!
2021-06-28 17:53:16,510 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:14,测试用例标题:促销开始时间晚于促销结束时间,执行成功!
2021-06-28 17:53:16,653 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:15,测试用例标题:重复开启促销,执行成功!
2021-06-28 17:53:16,821 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:16,测试用例标题:未上架商品开启促销,执行成功!
2021-06-28 17:53:16,968 - [test_business_regist04.py -->line:64] - INFO:测试编号:1,测试用例标题:注册成功,执行成功!
2021-06-28 17:53:17,097 - [test_business_regist04.py -->line:64] - INFO:测试编号:2,测试用例标题:用户名为空,执行成功!
2021-06-28 17:53:17,241 - [test_business_regist04.py -->line:64] - INFO:测试编号:3,测试用例标题:用户名有效边界值,执行成功!
2021-06-28 17:53:17,369 - [test_business_regist04.py -->line:64] - INFO:测试编号:4,测试用例标题:用户名无效边界值,执行成功!
2021-06-28 17:53:17,495 - [test_business_regist04.py -->line:64] - INFO:测试编号:5,测试用例标题:用户名非字母开头,执行成功!
2021-06-28 17:53:17,625 - [test_business_regist04.py -->line:64] - INFO:测试编号:6,测试用例标题:用户名包含符号,执行成功!
2021-06-28 17:53:17,755 - [test_business_regist04.py -->line:64] - INFO:测试编号:7,测试用例标题:用户名包含汉字,执行成功!
2021-06-28 17:53:17,910 - [test_business_regist04.py -->line:64] - INFO:测试编号:8,测试用例标题:用户名已注册,执行成功!
2021-06-28 17:53:18,041 - [test_business_regist04.py -->line:64] - INFO:测试编号:9,测试用例标题:密码为空,执行成功!
2021-06-28 17:53:18,205 - [test_business_regist04.py -->line:64] - INFO:测试编号:10,测试用例标题:密码有效边界值,执行成功!
2021-06-28 17:53:18,341 - [test_business_regist04.py -->line:64] - INFO:测试编号:11,测试用例标题:密码无效边界值,执行成功!
2021-06-28 17:53:18,474 - [test_business_regist04.py -->line:64] - INFO:测试编号:12,测试用例标题:确认密码和密码不一致,执行成功!
2021-06-28 17:53:18,608 - [test_business_regist04.py -->line:64] - INFO:测试编号:13,测试用例标题:确认密码为空,执行成功!
2021-06-28 17:53:18,757 - [test_business_regist04.py -->line:64] - INFO:测试编号:14,测试用例标题:确认密码区分大小写,执行成功!
2021-06-28 17:53:18,899 - [test_business_regist04.py -->line:64] - INFO:测试编号:15,测试用例标题:正确密码+其他,执行成功!
2021-06-28 17:53:19,029 - [test_business_regist04.py -->line:64] - INFO:测试编号:16,测试用例标题:手机号码为空,执行成功!
2021-06-28 17:53:19,162 - [test_business_regist04.py -->line:59] - ERROR:测试编号:17,测试用例标题:手机号码不支持号段,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-28 17:53:19,162 - [test_business_regist04.py -->line:60] - ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_regist03\test_business_regist04.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res)  # 判定响应结果
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-28 17:53:19,299 - [test_business_regist04.py -->line:64] - INFO:测试编号:18,测试用例标题:手机号码非11位数字,执行成功!
2021-06-28 17:53:19,438 - [test_business_regist04.py -->line:64] - INFO:测试编号:19,测试用例标题:手机号码非数字,执行成功!
2021-06-28 17:53:19,577 - [test_business_regist04.py -->line:64] - INFO:测试编号:20,测试用例标题:手机号已注册,执行成功!
2021-06-28 17:53:19,729 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:1,测试用例标题:正常流程_无条件查询,执行成功!
2021-06-28 17:53:19,869 - [test_business_token_goodsInfo03.py -->line:74] - ERROR:测试编号:2,测试用例标题:正常流程_所有条件组合,执行失败,实际结果为:{'code': 1008, 'msg': '没有符合条件的数据'}
2021-06-28 17:53:19,869 - [test_business_token_goodsInfo03.py -->line:75] - ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 49, in test_token_goods_info
    self.assertIn(case.expect, str(res))  # 判定响应结果包含 查询成功
  File "D:\Tools\Python\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-06-28 17:53:20,020 - [test_business_token_goodsInfo03.py -->line:74] - ERROR:测试编号:3,测试用例标题:正常流程_部分条件组合1,执行失败,实际结果为:{'code': 1008, 'msg': '没有符合条件的数据'}
2021-06-28 17:53:20,020 - [test_business_token_goodsInfo03.py -->line:75] - ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 49, in test_token_goods_info
    self.assertIn(case.expect, str(res))  # 判定响应结果包含 查询成功
  File "D:\Tools\Python\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-06-28 17:53:20,177 - [test_business_token_goodsInfo03.py -->line:74] - ERROR:测试编号:4,测试用例标题:正常流程_部分条件组合2,执行失败,实际结果为:{'code': 1008, 'msg': '没有符合条件的数据'}
2021-06-28 17:53:20,177 - [test_business_token_goodsInfo03.py -->line:75] - ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 49, in test_token_goods_info
    self.assertIn(case.expect, str(res))  # 判定响应结果包含 查询成功
  File "D:\Tools\Python\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-06-28 17:53:20,312 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:5,测试用例标题:正常流程_部分条件组合3,执行成功!
2021-06-28 17:53:20,445 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:6,测试用例标题:正常流程_单个入参进行查询1,执行成功!
2021-06-28 17:53:20,581 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:7,测试用例标题:正常流程_单个入参进行查询2,执行成功!
2021-06-28 17:53:20,719 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:8,测试用例标题:正常流程_单个入参进行查询3,执行成功!
2021-06-28 17:53:20,855 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:9,测试用例标题:token为空,执行成功!
2021-06-28 17:53:20,997 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:10,测试用例标题:token过期的场景,执行成功!
2021-06-28 17:53:21,147 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:11,测试用例标题:错误token值,执行成功!
2021-06-28 17:53:21,294 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:12,测试用例标题:不存在的商品ID,执行成功!
2021-06-28 17:53:21,438 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:13,测试用例标题:商品编号非数字,执行成功!
2021-06-28 17:53:21,582 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:14,测试用例标题:销售状态非枚举,执行成功!
2021-06-28 17:53:21,731 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:15,测试用例标题:销售状态格式错误,执行成功!
2021-06-28 17:53:21,868 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:16,测试用例标题:促销状态非枚举,执行成功!
2021-06-28 17:53:22,021 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:17,测试用例标题:销售状态格式错误,执行成功!
2021-06-28 17:53:22,177 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:53:22,307 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-28 17:53:22,437 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-28 17:53:22,572 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-28 17:53:22,722 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:5,测试用例标题:商品名为空,执行成功!
2021-06-28 17:53:22,883 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:6,测试用例标题:商品名已存在,执行成功!
2021-06-28 17:53:23,032 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:7,测试用例标题:商品名的有效边界值,执行成功!
2021-06-28 17:53:23,174 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:8,测试用例标题:商品名无效边界值,执行成功!
2021-06-28 17:53:23,316 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:9,测试用例标题:商品分类ID为空,执行成功!
2021-06-28 17:53:23,457 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:10,测试用例标题:商品分类ID不存在,执行成功!
2021-06-28 17:53:23,593 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:11,测试用例标题:商品分类ID非数字,执行成功!
2021-06-28 17:53:23,727 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:12,测试用例标题:ID非5位数字,执行成功!
2021-06-28 17:53:23,880 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:13,测试用例标题:商品描述为空,执行成功!
2021-06-28 17:53:24,046 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:14,测试用例标题:商品描述有效边界值,执行成功!
2021-06-28 17:53:24,181 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:15,测试用例标题:商品描述无效边界值,执行成功!
2021-06-28 17:53:24,317 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:16,测试用例标题:商品库存为空,执行成功!
2021-06-28 17:53:24,465 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:17,测试用例标题:商品库存有效边界,执行成功!
2021-06-28 17:53:24,598 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:18,测试用例标题:商品库存无效边界值,执行成功!
2021-06-28 17:53:24,732 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:19,测试用例标题:商品库存非整数,执行成功!
2021-06-28 17:53:24,865 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:20,测试用例标题:商品库存为负数,执行成功!
2021-06-28 17:53:25,002 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:21,测试用例标题:商品价格为空,执行成功!
2021-06-28 17:53:25,138 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:22,测试用例标题:商品价格非数字,执行成功!
2021-06-28 17:53:25,289 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:23,测试用例标题:商品价格有效边界,执行成功!
2021-06-28 17:53:25,427 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:24,测试用例标题:商品价格无效边界,执行成功!
2021-06-28 17:53:25,567 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:25,测试用例标题:商品价格非两位小数,执行成功!
2021-06-28 17:53:25,705 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:26,测试用例标题:商品价格为负数,执行成功!
2021-06-28 17:53:25,844 - [test_Login04.py -->line:68] - INFO:测试编号:1,测试用例标题:登录成功,执行成功！
2021-06-28 17:53:25,992 - [test_Login04.py -->line:68] - INFO:测试编号:2,测试用例标题:用户名为空,执行成功！
2021-06-28 17:53:26,126 - [test_Login04.py -->line:68] - INFO:测试编号:3,测试用例标题:错误的用户名,执行成功！
2021-06-28 17:53:26,260 - [test_Login04.py -->line:68] - INFO:测试编号:4,测试用例标题:大小写区分,执行成功！
2021-06-28 17:53:26,391 - [test_Login04.py -->line:68] - INFO:测试编号:5,测试用例标题:密码为空,执行成功！
2021-06-28 17:53:26,525 - [test_Login04.py -->line:68] - INFO:测试编号:6,测试用例标题:密码错误,执行成功！
2021-06-28 17:53:26,657 - [test_Login04.py -->line:68] - INFO:测试编号:7,测试用例标题:大小写区分,执行成功！
2021-06-28 17:53:26,788 - [test_Login04.py -->line:68] - INFO:测试编号:8,测试用例标题:用户类型为空,执行成功！
2021-06-28 17:53:26,918 - [test_Login04.py -->line:68] - INFO:测试编号:9,测试用例标题:用户类型非枚举,执行成功！
2021-06-28 17:53:27,048 - [test_Login04.py -->line:68] - INFO:测试编号:10,测试用例标题:非普通用户,执行成功！
2021-06-28 17:53:27,180 - [test_Login04.py -->line:68] - INFO:测试编号:11,测试用例标题:格式错误,执行成功！
2021-06-28 17:53:27,325 - [test_business_token_items02.py -->line:69] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-28 17:53:27,458 - [test_business_token_items02.py -->line:69] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-28 17:53:27,598 - [test_business_token_items02.py -->line:69] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-28 17:53:27,749 - [test_business_token_items02.py -->line:69] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-28 17:53:27,912 - [test_business_token_items02.py -->line:69] - INFO:测试编号:5,测试用例标题:订单编号为空,执行成功!
2021-06-28 17:53:28,050 - [test_business_token_items02.py -->line:69] - INFO:测试编号:6,测试用例标题:订单编号非5位数字,执行成功!
2021-06-28 17:53:28,187 - [test_business_token_items02.py -->line:69] - INFO:测试编号:7,测试用例标题:订单编号非数字,执行成功!
2021-06-28 17:53:28,324 - [test_business_token_items02.py -->line:69] - INFO:测试编号:8,测试用例标题:订单编号不存在,执行成功!
2021-06-29 10:40:21,359 - [test_business_goods_delete01.py -->line:47] - INFO:测试编号:1,测试用例标题:正确流程,执行成功!
2021-06-29 10:46:46,186 - [test_business_goods_delete02.py -->line:52] - ERROR:测试编号:1,测试用例标题:正确流程,执行失败,实际结果为:{'code': 1004, 'msg': '该商品不存在'}
2021-06-29 10:46:46,187 - [test_business_goods_delete02.py -->line:53] - ERROR: :: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1004, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1004, 'msg': '该商品不存在'}
?             ^          +  ^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_goods_delete08\test_business_goods_delete02.py", line 45, in test_goods_delete
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1004, 'msg': '该商品不存在'}
2021-06-29 10:48:05,763 - [test_business_goods_delete02.py -->line:58] - INFO:测试编号:1,测试用例标题:正确流程,执行成功!
2021-06-29 10:48:08,218 - [test_business_goods_delete02.py -->line:58] - INFO:测试编号:1,测试用例标题:正确流程,执行成功!
2021-06-29 10:48:10,421 - [test_business_goods_delete02.py -->line:58] - INFO:测试编号:1,测试用例标题:正确流程,执行成功!
2021-06-29 10:48:12,273 - [test_business_goods_delete02.py -->line:58] - INFO:测试编号:1,测试用例标题:正确流程,执行成功!
2021-06-29 10:48:14,282 - [test_business_goods_delete02.py -->line:58] - INFO:测试编号:1,测试用例标题:正确流程,执行成功!
2021-06-29 10:48:15,976 - [test_business_goods_delete02.py -->line:58] - INFO:测试编号:1,测试用例标题:正确流程,执行成功!
2021-06-29 10:48:18,240 - [test_business_goods_delete02.py -->line:58] - INFO:测试编号:1,测试用例标题:正确流程,执行成功!
2021-06-29 10:49:14,517 - [test_business_goods_delete03.py -->line:58] - INFO:测试编号:1,测试用例标题:正确流程,执行成功!
2021-06-29 10:49:14,775 - [test_business_goods_delete03.py -->line:58] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-29 10:49:14,958 - [test_business_goods_delete03.py -->line:53] - ERROR:测试编号:3,测试用例标题:token已失效,执行失败,实际结果为:{'code': 1004, 'msg': '该商品不存在'}
2021-06-29 10:49:14,958 - [test_business_goods_delete03.py -->line:54] - ERROR: :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'}
+ {'code': 1004, 'msg': '该商品不存在'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_goods_delete08\test_business_goods_delete03.py", line 46, in test_goods_delete
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
2021-06-29 10:49:15,115 - [test_business_goods_delete03.py -->line:53] - ERROR:测试编号:4,测试用例标题:token值错误,执行失败,实际结果为:{'code': 1004, 'msg': '该商品不存在'}
2021-06-29 10:49:15,115 - [test_business_goods_delete03.py -->line:54] - ERROR: :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'}
+ {'code': 1004, 'msg': '该商品不存在'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_goods_delete08\test_business_goods_delete03.py", line 46, in test_goods_delete
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
2021-06-29 10:49:15,261 - [test_business_goods_delete03.py -->line:53] - ERROR:测试编号:5,测试用例标题:token值区分大小写,执行失败,实际结果为:{'code': 1004, 'msg': '该商品不存在'}
2021-06-29 10:49:15,262 - [test_business_goods_delete03.py -->line:54] - ERROR: :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'}
+ {'code': 1004, 'msg': '该商品不存在'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_goods_delete08\test_business_goods_delete03.py", line 46, in test_goods_delete
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
2021-06-29 10:49:15,416 - [test_business_goods_delete03.py -->line:53] - ERROR:测试编号:6,测试用例标题:上一个未失效的token值,执行失败,实际结果为:{'code': 1004, 'msg': '该商品不存在'}
2021-06-29 10:49:15,417 - [test_business_goods_delete03.py -->line:54] - ERROR: :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'}
+ {'code': 1004, 'msg': '该商品不存在'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_goods_delete08\test_business_goods_delete03.py", line 46, in test_goods_delete
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
2021-06-29 10:49:15,568 - [test_business_goods_delete03.py -->line:58] - INFO:测试编号:7,测试用例标题:商品编号为空,执行成功!
2021-06-29 10:49:15,720 - [test_business_goods_delete03.py -->line:58] - INFO:测试编号:8,测试用例标题:商品编号非6位数字,执行成功!
2021-06-29 10:49:15,871 - [test_business_goods_delete03.py -->line:58] - INFO:测试编号:9,测试用例标题:商品编号包含符号,执行成功!
2021-06-29 10:49:16,022 - [test_business_goods_delete03.py -->line:58] - INFO:测试编号:10,测试用例标题:商品编号包含汉字,执行成功!
2021-06-29 10:49:16,176 - [test_business_goods_delete03.py -->line:58] - INFO:测试编号:11,测试用例标题:商品编号包含字母,执行成功!
2021-06-29 10:49:16,325 - [test_business_goods_delete03.py -->line:58] - INFO:测试编号:12,测试用例标题:商品编号不存在,执行成功!
2021-06-29 10:58:57,704 - [test_business_goods_delete03.py -->line:64] - INFO:测试编号:1,测试用例标题:正确流程,执行成功!
2021-06-29 10:58:57,952 - [test_business_goods_delete03.py -->line:64] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-29 10:58:58,130 - [test_business_goods_delete03.py -->line:59] - ERROR:测试编号:3,测试用例标题:token已失效,执行失败,实际结果为:{'code': 1004, 'msg': '该商品不存在'}
2021-06-29 10:58:58,130 - [test_business_goods_delete03.py -->line:60] - ERROR: :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'}
+ {'code': 1004, 'msg': '该商品不存在'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_goods_delete08\test_business_goods_delete03.py", line 52, in test_goods_delete
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
2021-06-29 10:58:58,277 - [test_business_goods_delete03.py -->line:59] - ERROR:测试编号:4,测试用例标题:token值错误,执行失败,实际结果为:{'code': 1004, 'msg': '该商品不存在'}
2021-06-29 10:58:58,277 - [test_business_goods_delete03.py -->line:60] - ERROR: :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'}
+ {'code': 1004, 'msg': '该商品不存在'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_goods_delete08\test_business_goods_delete03.py", line 52, in test_goods_delete
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
2021-06-29 10:58:58,421 - [test_business_goods_delete03.py -->line:59] - ERROR:测试编号:5,测试用例标题:上一个未失效的token值,执行失败,实际结果为:{'code': 1004, 'msg': '该商品不存在'}
2021-06-29 10:58:58,421 - [test_business_goods_delete03.py -->line:60] - ERROR: :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'}
+ {'code': 1004, 'msg': '该商品不存在'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_goods_delete08\test_business_goods_delete03.py", line 52, in test_goods_delete
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
2021-06-29 10:58:58,569 - [test_business_goods_delete03.py -->line:64] - INFO:测试编号:6,测试用例标题:商品编号为空,执行成功!
2021-06-29 10:58:58,715 - [test_business_goods_delete03.py -->line:64] - INFO:测试编号:7,测试用例标题:商品编号非6位数字,执行成功!
2021-06-29 10:58:58,859 - [test_business_goods_delete03.py -->line:64] - INFO:测试编号:8,测试用例标题:商品编号包含符号,执行成功!
2021-06-29 10:58:59,000 - [test_business_goods_delete03.py -->line:64] - INFO:测试编号:9,测试用例标题:商品编号包含汉字,执行成功!
2021-06-29 10:58:59,142 - [test_business_goods_delete03.py -->line:64] - INFO:测试编号:10,测试用例标题:商品编号包含字母,执行成功!
2021-06-29 10:58:59,284 - [test_business_goods_delete03.py -->line:64] - INFO:测试编号:11,测试用例标题:商品编号不存在,执行成功!
2021-06-29 10:59:24,315 - [test_business_goods_delete03.py -->line:64] - INFO:测试编号:1,测试用例标题:正确流程,执行成功!
2021-06-29 10:59:24,571 - [test_business_goods_delete03.py -->line:64] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-29 10:59:24,762 - [test_business_goods_delete03.py -->line:59] - ERROR:测试编号:3,测试用例标题:token已失效,执行失败,实际结果为:{'code': 1004, 'msg': '该商品不存在'}
2021-06-29 10:59:24,762 - [test_business_goods_delete03.py -->line:60] - ERROR: :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'}
+ {'code': 1004, 'msg': '该商品不存在'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_goods_delete08\test_business_goods_delete03.py", line 52, in test_goods_delete
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
2021-06-29 10:59:24,922 - [test_business_goods_delete03.py -->line:59] - ERROR:测试编号:4,测试用例标题:token值错误,执行失败,实际结果为:{'code': 1004, 'msg': '该商品不存在'}
2021-06-29 10:59:24,923 - [test_business_goods_delete03.py -->line:60] - ERROR: :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'}
+ {'code': 1004, 'msg': '该商品不存在'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_goods_delete08\test_business_goods_delete03.py", line 52, in test_goods_delete
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
2021-06-29 10:59:25,077 - [test_business_goods_delete03.py -->line:59] - ERROR:测试编号:5,测试用例标题:上一个未失效的token值,执行失败,实际结果为:{'code': 1004, 'msg': '该商品不存在'}
2021-06-29 10:59:25,077 - [test_business_goods_delete03.py -->line:60] - ERROR: :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'}
+ {'code': 1004, 'msg': '该商品不存在'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_goods_delete08\test_business_goods_delete03.py", line 52, in test_goods_delete
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
2021-06-29 10:59:25,220 - [test_business_goods_delete03.py -->line:64] - INFO:测试编号:6,测试用例标题:商品编号为空,执行成功!
2021-06-29 10:59:25,363 - [test_business_goods_delete03.py -->line:64] - INFO:测试编号:7,测试用例标题:商品编号非6位数字,执行成功!
2021-06-29 10:59:25,503 - [test_business_goods_delete03.py -->line:64] - INFO:测试编号:8,测试用例标题:商品编号包含符号,执行成功!
2021-06-29 10:59:25,644 - [test_business_goods_delete03.py -->line:64] - INFO:测试编号:9,测试用例标题:商品编号包含汉字,执行成功!
2021-06-29 10:59:25,798 - [test_business_goods_delete03.py -->line:64] - INFO:测试编号:10,测试用例标题:商品编号包含字母,执行成功!
2021-06-29 10:59:25,944 - [test_business_goods_delete03.py -->line:64] - INFO:测试编号:11,测试用例标题:商品编号不存在,执行成功!
2021-06-29 11:14:08,988 - [test_business_goods_delete03.py -->line:64] - INFO:测试编号:1,测试用例标题:正确流程,执行成功!
2021-06-29 11:14:09,222 - [test_business_goods_delete03.py -->line:64] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-29 11:14:09,384 - [test_business_goods_delete03.py -->line:59] - ERROR:测试编号:3,测试用例标题:token已失效,执行失败,实际结果为:{'code': 1004, 'msg': '该商品不存在'}
2021-06-29 11:14:09,385 - [test_business_goods_delete03.py -->line:60] - ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'}
+ {'code': 1004, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_goods_delete08\test_business_goods_delete03.py", line 52, in test_goods_delete
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'}
+ {'code': 1004, 'msg': '该商品不存在'}
2021-06-29 11:14:09,531 - [test_business_goods_delete03.py -->line:59] - ERROR:测试编号:4,测试用例标题:token值错误,执行失败,实际结果为:{'code': 1004, 'msg': '该商品不存在'}
2021-06-29 11:14:09,531 - [test_business_goods_delete03.py -->line:60] - ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'}
+ {'code': 1004, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_goods_delete08\test_business_goods_delete03.py", line 52, in test_goods_delete
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'}
+ {'code': 1004, 'msg': '该商品不存在'}
2021-06-29 11:14:09,687 - [test_business_goods_delete03.py -->line:59] - ERROR:测试编号:5,测试用例标题:上一个未失效的token值,执行失败,实际结果为:{'code': 1004, 'msg': '该商品不存在'}
2021-06-29 11:14:09,687 - [test_business_goods_delete03.py -->line:60] - ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'}
+ {'code': 1004, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_goods_delete08\test_business_goods_delete03.py", line 52, in test_goods_delete
    self.assertEqual(eval(case.expect), res)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'}
+ {'code': 1004, 'msg': '该商品不存在'}
2021-06-29 11:14:09,845 - [test_business_goods_delete03.py -->line:64] - INFO:测试编号:6,测试用例标题:商品编号为空,执行成功!
2021-06-29 11:14:09,991 - [test_business_goods_delete03.py -->line:64] - INFO:测试编号:7,测试用例标题:商品编号非6位数字,执行成功!
2021-06-29 11:14:10,131 - [test_business_goods_delete03.py -->line:64] - INFO:测试编号:8,测试用例标题:商品编号包含符号,执行成功!
2021-06-29 11:14:10,272 - [test_business_goods_delete03.py -->line:64] - INFO:测试编号:9,测试用例标题:商品编号包含汉字,执行成功!
2021-06-29 11:14:10,412 - [test_business_goods_delete03.py -->line:64] - INFO:测试编号:10,测试用例标题:商品编号包含字母,执行成功!
2021-06-29 11:14:10,568 - [test_business_goods_delete03.py -->line:64] - INFO:测试编号:11,测试用例标题:商品编号不存在,执行成功!
2021-06-29 11:14:10,725 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-29 11:14:10,860 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-29 11:14:10,996 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-29 11:14:11,135 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-29 11:14:11,277 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:5,测试用例标题:促销开始时间为空,执行成功!
2021-06-29 11:14:11,415 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:6,测试用例标题:促销开始时间格式错误,执行成功!
2021-06-29 11:14:11,558 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:7,测试用例标题:促销开始时间早于当前时间,执行成功!
2021-06-29 11:14:11,732 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:8,测试用例标题:促销结束时间为空,执行成功!
2021-06-29 11:14:11,877 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:9,测试用例标题:促销结束时间格式错误,执行成功!
2021-06-29 11:14:12,016 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:10,测试用例标题:商品编号为空,执行成功!
2021-06-29 11:14:12,169 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:11,测试用例标题:商品编号非6位数字,执行成功!
2021-06-29 11:14:12,314 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:12,测试用例标题:商品编号非数字,执行成功!
2021-06-29 11:14:12,456 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:13,测试用例标题:商品编号不存在,执行成功!
2021-06-29 11:14:12,613 - [test_business_goods_promote03.py -->line:84] - INFO:测试编号:14,测试用例标题:促销开始时间晚于促销结束时间,执行成功!
2021-06-29 11:14:12,782 - [test_business_regist04.py -->line:64] - INFO:测试编号:1,测试用例标题:注册成功,执行成功!
2021-06-29 11:14:12,917 - [test_business_regist04.py -->line:64] - INFO:测试编号:2,测试用例标题:用户名为空,执行成功!
2021-06-29 11:14:13,067 - [test_business_regist04.py -->line:64] - INFO:测试编号:3,测试用例标题:用户名有效边界值,执行成功!
2021-06-29 11:14:13,201 - [test_business_regist04.py -->line:64] - INFO:测试编号:4,测试用例标题:用户名无效边界值,执行成功!
2021-06-29 11:14:13,333 - [test_business_regist04.py -->line:64] - INFO:测试编号:5,测试用例标题:用户名非字母开头,执行成功!
2021-06-29 11:14:13,466 - [test_business_regist04.py -->line:64] - INFO:测试编号:6,测试用例标题:用户名包含符号,执行成功!
2021-06-29 11:14:13,601 - [test_business_regist04.py -->line:64] - INFO:测试编号:7,测试用例标题:用户名包含汉字,执行成功!
2021-06-29 11:14:13,741 - [test_business_regist04.py -->line:64] - INFO:测试编号:8,测试用例标题:用户名已注册,执行成功!
2021-06-29 11:14:13,875 - [test_business_regist04.py -->line:64] - INFO:测试编号:9,测试用例标题:密码为空,执行成功!
2021-06-29 11:14:14,024 - [test_business_regist04.py -->line:64] - INFO:测试编号:10,测试用例标题:密码有效边界值,执行成功!
2021-06-29 11:14:14,158 - [test_business_regist04.py -->line:64] - INFO:测试编号:11,测试用例标题:密码无效边界值,执行成功!
2021-06-29 11:14:14,290 - [test_business_regist04.py -->line:64] - INFO:测试编号:12,测试用例标题:确认密码和密码不一致,执行成功!
2021-06-29 11:14:14,440 - [test_business_regist04.py -->line:64] - INFO:测试编号:13,测试用例标题:确认密码为空,执行成功!
2021-06-29 11:14:14,572 - [test_business_regist04.py -->line:64] - INFO:测试编号:14,测试用例标题:确认密码区分大小写,执行成功!
2021-06-29 11:14:14,706 - [test_business_regist04.py -->line:64] - INFO:测试编号:15,测试用例标题:正确密码+其他,执行成功!
2021-06-29 11:14:14,838 - [test_business_regist04.py -->line:64] - INFO:测试编号:16,测试用例标题:手机号码为空,执行成功!
2021-06-29 11:14:14,973 - [test_business_regist04.py -->line:59] - ERROR:测试编号:17,测试用例标题:手机号码不支持号段,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-29 11:14:14,973 - [test_business_regist04.py -->line:60] - ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_regist03\test_business_regist04.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res)  # 判定响应结果
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-06-29 11:14:15,113 - [test_business_regist04.py -->line:64] - INFO:测试编号:18,测试用例标题:手机号码非11位数字,执行成功!
2021-06-29 11:14:15,250 - [test_business_regist04.py -->line:64] - INFO:测试编号:19,测试用例标题:手机号码非数字,执行成功!
2021-06-29 11:14:15,397 - [test_business_regist04.py -->line:64] - INFO:测试编号:20,测试用例标题:手机号已注册,执行成功!
2021-06-29 11:14:15,544 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:1,测试用例标题:正常流程_无条件查询,执行成功!
2021-06-29 11:14:15,709 - [test_business_token_goodsInfo03.py -->line:74] - ERROR:测试编号:2,测试用例标题:正常流程_所有条件组合,执行失败,实际结果为:{'code': 1008, 'msg': '没有符合条件的数据'}
2021-06-29 11:14:15,710 - [test_business_token_goodsInfo03.py -->line:75] - ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 49, in test_token_goods_info
    self.assertIn(case.expect, str(res))  # 判定响应结果包含 查询成功
  File "D:\Tools\Python\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-06-29 11:14:15,865 - [test_business_token_goodsInfo03.py -->line:74] - ERROR:测试编号:3,测试用例标题:正常流程_部分条件组合1,执行失败,实际结果为:{'code': 1008, 'msg': '没有符合条件的数据'}
2021-06-29 11:14:15,865 - [test_business_token_goodsInfo03.py -->line:75] - ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 49, in test_token_goods_info
    self.assertIn(case.expect, str(res))  # 判定响应结果包含 查询成功
  File "D:\Tools\Python\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-06-29 11:14:16,008 - [test_business_token_goodsInfo03.py -->line:74] - ERROR:测试编号:4,测试用例标题:正常流程_部分条件组合2,执行失败,实际结果为:{'code': 1008, 'msg': '没有符合条件的数据'}
2021-06-29 11:14:16,008 - [test_business_token_goodsInfo03.py -->line:75] - ERROR:'查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 49, in test_token_goods_info
    self.assertIn(case.expect, str(res))  # 判定响应结果包含 查询成功
  File "D:\Tools\Python\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '查询成功' not found in "{'code': 1008, 'msg': '没有符合条件的数据'}"
2021-06-29 11:14:16,151 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:5,测试用例标题:正常流程_部分条件组合3,执行成功!
2021-06-29 11:14:16,306 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:6,测试用例标题:正常流程_单个入参进行查询1,执行成功!
2021-06-29 11:14:16,467 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:7,测试用例标题:正常流程_单个入参进行查询2,执行成功!
2021-06-29 11:14:16,607 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:8,测试用例标题:正常流程_单个入参进行查询3,执行成功!
2021-06-29 11:14:16,742 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:9,测试用例标题:token为空,执行成功!
2021-06-29 11:14:16,875 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:10,测试用例标题:token过期的场景,执行成功!
2021-06-29 11:14:17,011 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:11,测试用例标题:错误token值,执行成功!
2021-06-29 11:14:17,153 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:12,测试用例标题:不存在的商品ID,执行成功!
2021-06-29 11:14:17,292 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:13,测试用例标题:商品编号非数字,执行成功!
2021-06-29 11:14:17,433 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:14,测试用例标题:销售状态非枚举,执行成功!
2021-06-29 11:14:17,573 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:15,测试用例标题:销售状态格式错误,执行成功!
2021-06-29 11:14:17,714 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:16,测试用例标题:促销状态非枚举,执行成功!
2021-06-29 11:14:17,855 - [test_business_token_goodsInfo03.py -->line:79] - INFO:测试编号:17,测试用例标题:销售状态格式错误,执行成功!
2021-06-29 11:14:18,000 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-29 11:14:18,137 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-29 11:14:18,271 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-29 11:14:18,423 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-29 11:14:18,562 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:5,测试用例标题:商品名为空,执行成功!
2021-06-29 11:14:18,715 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:6,测试用例标题:商品名已存在,执行成功!
2021-06-29 11:14:18,870 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:7,测试用例标题:商品名的有效边界值,执行成功!
2021-06-29 11:14:19,008 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:8,测试用例标题:商品名无效边界值,执行成功!
2021-06-29 11:14:19,148 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:9,测试用例标题:商品分类ID为空,执行成功!
2021-06-29 11:14:19,289 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:10,测试用例标题:商品分类ID不存在,执行成功!
2021-06-29 11:14:19,425 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:11,测试用例标题:商品分类ID非数字,执行成功!
2021-06-29 11:14:19,568 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:12,测试用例标题:ID非5位数字,执行成功!
2021-06-29 11:14:19,720 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:13,测试用例标题:商品描述为空,执行成功!
2021-06-29 11:14:19,876 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:14,测试用例标题:商品描述有效边界值,执行成功!
2021-06-29 11:14:20,015 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:15,测试用例标题:商品描述无效边界值,执行成功!
2021-06-29 11:14:20,154 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:16,测试用例标题:商品库存为空,执行成功!
2021-06-29 11:14:20,322 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:17,测试用例标题:商品库存有效边界,执行成功!
2021-06-29 11:14:20,462 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:18,测试用例标题:商品库存无效边界值,执行成功!
2021-06-29 11:14:20,599 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:19,测试用例标题:商品库存非整数,执行成功!
2021-06-29 11:14:20,743 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:20,测试用例标题:商品库存为负数,执行成功!
2021-06-29 11:14:20,882 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:21,测试用例标题:商品价格为空,执行成功!
2021-06-29 11:14:21,028 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:22,测试用例标题:商品价格非数字,执行成功!
2021-06-29 11:14:21,202 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:23,测试用例标题:商品价格有效边界,执行成功!
2021-06-29 11:14:21,344 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:24,测试用例标题:商品价格无效边界,执行成功!
2021-06-29 11:14:21,481 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:25,测试用例标题:商品价格非两位小数,执行成功!
2021-06-29 11:14:21,621 - [test_business_goods_inputs03.py -->line:63] - INFO:测试编号:26,测试用例标题:商品价格为负数,执行成功!
2021-06-29 11:14:21,762 - [test_Login04.py -->line:68] - INFO:测试编号:1,测试用例标题:登录成功,执行成功！
2021-06-29 11:14:21,901 - [test_Login04.py -->line:68] - INFO:测试编号:2,测试用例标题:用户名为空,执行成功！
2021-06-29 11:14:22,034 - [test_Login04.py -->line:68] - INFO:测试编号:3,测试用例标题:错误的用户名,执行成功！
2021-06-29 11:14:22,170 - [test_Login04.py -->line:68] - INFO:测试编号:4,测试用例标题:大小写区分,执行成功！
2021-06-29 11:14:22,320 - [test_Login04.py -->line:68] - INFO:测试编号:5,测试用例标题:密码为空,执行成功！
2021-06-29 11:14:22,456 - [test_Login04.py -->line:68] - INFO:测试编号:6,测试用例标题:密码错误,执行成功！
2021-06-29 11:14:22,589 - [test_Login04.py -->line:68] - INFO:测试编号:7,测试用例标题:大小写区分,执行成功！
2021-06-29 11:14:22,727 - [test_Login04.py -->line:68] - INFO:测试编号:8,测试用例标题:用户类型为空,执行成功！
2021-06-29 11:14:22,862 - [test_Login04.py -->line:68] - INFO:测试编号:9,测试用例标题:用户类型非枚举,执行成功！
2021-06-29 11:14:22,998 - [test_Login04.py -->line:68] - INFO:测试编号:10,测试用例标题:非普通用户,执行成功！
2021-06-29 11:14:23,133 - [test_Login04.py -->line:68] - INFO:测试编号:11,测试用例标题:格式错误,执行成功！
2021-06-29 11:14:23,276 - [test_business_token_items02.py -->line:69] - INFO:测试编号:1,测试用例标题:正常流程,执行成功!
2021-06-29 11:14:23,413 - [test_business_token_items02.py -->line:69] - INFO:测试编号:2,测试用例标题:token为空,执行成功!
2021-06-29 11:14:23,548 - [test_business_token_items02.py -->line:69] - INFO:测试编号:3,测试用例标题:token过期,执行成功!
2021-06-29 11:14:23,693 - [test_business_token_items02.py -->line:69] - INFO:测试编号:4,测试用例标题:错误token值,执行成功!
2021-06-29 11:14:23,836 - [test_business_token_items02.py -->line:69] - INFO:测试编号:5,测试用例标题:订单编号为空,执行成功!
2021-06-29 11:14:23,983 - [test_business_token_items02.py -->line:69] - INFO:测试编号:6,测试用例标题:订单编号非5位数字,执行成功!
2021-06-29 11:14:24,126 - [test_business_token_items02.py -->line:69] - INFO:测试编号:7,测试用例标题:订单编号非数字,执行成功!
2021-06-29 11:14:24,286 - [test_business_token_items02.py -->line:69] - INFO:测试编号:8,测试用例标题:订单编号不存在,执行成功!
2021-06-29 11:14:24,436 - [test_login07.py -->line:51] - INFO:测试编号1,测试用例的标题为:登录成功,执行成功！
2021-06-29 11:14:24,570 - [test_login07.py -->line:51] - INFO:测试编号2,测试用例的标题为:用户名为空,执行成功！
2021-06-29 11:14:24,703 - [test_login07.py -->line:51] - INFO:测试编号3,测试用例的标题为:用户名或密码错误,执行成功！
2021-06-29 11:14:24,842 - [test_login07.py -->line:51] - INFO:测试编号4,测试用例的标题为:密码为空,执行成功！
2021-06-29 11:14:24,974 - [test_login07.py -->line:51] - INFO:测试编号5,测试用例的标题为:用户名或密码错误,执行成功！
2021-06-29 11:14:25,122 - [test_regist07.py -->line:49] - INFO:测试编号1,测试用例标题正确流程,执行成功
2021-06-29 11:14:25,257 - [test_regist07.py -->line:49] - INFO:测试编号2,测试用例标题用户名为空,执行成功
2021-06-29 11:14:25,390 - [test_regist07.py -->line:49] - INFO:测试编号3,测试用例标题密码为空,执行成功
2021-06-29 11:14:25,522 - [test_regist07.py -->line:49] - INFO:测试编号4,测试用例标题确认密码不能为空,执行成功
2021-06-29 11:14:25,715 - [test_regist07.py -->line:49] - INFO:测试编号5,测试用例标题用户名已经存在,执行成功
2021-06-29 11:14:25,849 - [test_regist07.py -->line:49] - INFO:测试编号6,测试用例标题密码和确认密码不一致,执行成功
2021-06-29 11:14:25,981 - [test_regist07.py -->line:49] - INFO:测试编号7,测试用例标题用户名小于6位,执行成功
2021-06-29 11:14:26,115 - [test_regist07.py -->line:49] - INFO:测试编号8,测试用例标题用户名大于18位,执行成功
2021-06-29 11:14:26,265 - [test_regist07.py -->line:49] - INFO:测试编号9,测试用例标题密码小于6位,执行成功
2021-06-29 11:14:26,402 - [test_regist07.py -->line:49] - INFO:测试编号10,测试用例标题密码大于18位,执行成功
2021-06-29 11:14:26,533 - [test_regist07.py -->line:49] - INFO:测试编号11,测试用例标题密码17位,执行成功
2021-06-29 11:14:26,667 - [test_regist07.py -->line:44] - ERROR:测试编号12,测试用例标题邮箱不能为空,执行失败,实际结果：{'code': 1006, 'msg': '邮箱不能为空'}
2021-06-29 11:14:26,667 - [test_regist07.py -->line:45] - ERROR:{'code': 10066, 'msg': '邮箱不能为空'} != {'code': 1006, 'msg': '邮箱不能为空'}
- {'code': 10066, 'msg': '邮箱不能为空'}
?              -

+ {'code': 1006, 'msg': '邮箱不能为空'}
Traceback (most recent call last):
  File "D:\Tools\PythonWorkSpace\autotest03_business\testcases\test_my_interface01\test_regist07.py", line 40, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\Tools\Python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Tools\Python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Tools\Python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 10066, 'msg': '邮箱不能为空'} != {'code': 1006, 'msg': '邮箱不能为空'}
- {'code': 10066, 'msg': '邮箱不能为空'}
?              -

+ {'code': 1006, 'msg': '邮箱不能为空'}
