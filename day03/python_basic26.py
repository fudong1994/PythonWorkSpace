"""
-------------------------------------------------
   File Name:python_basic26
   Author:Lee
   date: 2021/5/26-16:53
-------------------------------------------------
"""

"""
python的深拷贝和浅拷贝的区别？
浅拷贝 使用的方法： B = copy.copy(A)
使用浅拷贝，当原容器对象中可变对象中有元素发生变化，拷贝到的对象也会发生变化

深拷贝 使用的方法是： B = copy.deepcopy(A)
使用深拷贝，当原容器对象中可变对象中有元素发生变化，拷贝得到的对象不会发生变化
"""

from copy import copy, deepcopy  # 导入copy模块中的copy函数

# 1.赋值和浅拷贝的区别？
a = ['a', 'b', 'c', 1, 2, 3, [1, 2, 3]]
b = a
a[0] = 'A'
print('a的值:', a)  # a的值: ['A', 'b', 'c', 1, 2, 3, [1, 2, 3]]
print('a的物理地址是:', id(a))  # a的物理地址是: 1439727179848
print('b的值:', b)  # b的值: ['A', 'b', 'c', 1, 2, 3, [1, 2, 3]]
print('b的物理地址是:', id(b))  # b的物理地址是: 1439727179848

# 对于浅拷贝，a中的不可变类型的元素和拷贝得到的对象c中的不可变类型的元素 互不影响
c = copy(a)
print('c的值:', c)  # c的值: ['A', 'b', 'c', 1, 2, 3, [1, 2, 3]]
print('c的物理地址是:', id(c))  # c的物理地址是: 2302530449928
c[1] = 'B'
print('a的值:', a)  # a的值: ['A', 'b', 'c', 1, 2, 3, [1, 2, 3]]
print('c的值:', c)  # c的值: ['A', 'B', 'c', 1, 2, 3, [1, 2, 3]]

# a中的可变类型的元素和拷贝得到的对象c中的可变类型的元素发生变化，另一个都会跟着改变
c[6][0] = 9
print('a的值:', a)  # a的值: ['A', 'b', 'c', 1, 2, 3, [9, 2, 3]]
print('c的值:', c)  # c的值: ['A', 'B', 'c', 1, 2, 3, [9, 2, 3]]

print('===' * 50)

# 2.深拷贝:复制出完全独立的新对象
d = deepcopy(a)
print('a的值:', a)  # ['A', 'b', 'c', 1, 2, 3, [9, 2, 3]]
print('d的值:', d)  # ['A', 'b', 'c', 1, 2, 3, [9, 2, 3]]

d[0] = 'AAA'
print('a的值:', a)  # a的值: ['A', 'b', 'c', 1, 2, 3, [9, 2, 3]]
print('d的值:', d)  # d的值: ['AAA', 'b', 'c', 1, 2, 3, [9, 2, 3]]

d[6][0] = 8
print('a的值:', a)  # a的值: ['A', 'b', 'c', 1, 2, 3, [9, 2, 3]]
print('d的值:', d)  # d的值: ['AAA', 'b', 'c', 1, 2, 3, [8, 2, 3]]
